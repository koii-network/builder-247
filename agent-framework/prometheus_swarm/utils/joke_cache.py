import time
from functools import lru_cache
from typing import Callable, Any

class JokeCache:
    """
    A caching mechanism for jokes with performance tracking and configurable expiration.
    
    Supports:
    - LRU (Least Recently Used) caching
    - Cache hit/miss tracking
    - Optional time-based cache expiration
    """
    
    def __init__(self, max_size: int = 128, max_age: float = 3600.0):
        """
        Initialize the joke cache.
        
        :param max_size: Maximum number of jokes to cache
        :param max_age: Maximum age of a cached joke in seconds
        """
        self._cache = {}
        self._cache_times = {}
        self._max_size = max_size
        self._max_age = max_age
        self._hits = 0
        self._misses = 0
    
    def get(self, key: str) -> Any:
        """
        Retrieve a joke from the cache, tracking hits and respecting expiration.
        
        :param key: Unique identifier for the joke
        :return: Cached joke or None if not found/expired
        """
        current_time = time.time()
        
        if (key in self._cache and 
            current_time - self._cache_times.get(key, 0) < self._max_age):
            self._hits += 1
            return self._cache[key]
        
        self._misses += 1
        return None
    
    def set(self, key: str, value: Any):
        """
        Add a joke to the cache, managing cache size.
        
        :param key: Unique identifier for the joke
        :param value: The joke to cache
        """
        if len(self._cache) >= self._max_size:
            # Remove the oldest entry if cache is full
            oldest_key = min(self._cache_times, key=self._cache_times.get)
            del self._cache[oldest_key]
            del self._cache_times[oldest_key]
        
        self._cache[key] = value
        self._cache_times[key] = time.time()
    
    def clear(self):
        """Clear the entire cache."""
        self._cache.clear()
        self._cache_times.clear()
        self._hits = 0
        self._misses = 0
    
    @property
    def stats(self):
        """
        Get cache performance statistics.
        
        :return: Dictionary of cache hit/miss metrics
        """
        total_lookups = self._hits + self._misses
        hit_rate = (self._hits / total_lookups) * 100 if total_lookups > 0 else 0
        
        return {
            'hits': self._hits,
            'misses': self._misses,
            'hit_rate': hit_rate
        }

def cached_joke_generator(cache: JokeCache):
    """
    Decorator to cache jokes generated by a function.
    
    :param cache: JokeCache instance to use
    :return: Decorated function with caching
    """
    def decorator(func: Callable):
        def wrapper(*args, **kwargs):
            # Create a unique cache key based on function and arguments
            key = f"{func.__name__}:{args}:{kwargs}"
            
            # Try to get from cache first
            cached_result = cache.get(key)
            if cached_result is not None:
                return cached_result
            
            # Generate new joke
            result = func(*args, **kwargs)
            
            # Store in cache
            cache.set(key, result)
            
            return result
        return wrapper
    return decorator