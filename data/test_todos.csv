todo,acceptance_criteria
"Given a 2D matrix filled with integers and a target integer, write a function that checks if the target exists in the matrix. The matrix has the following properties: 1. Inner lists are sorted in ascending order. 2. Rows are not necessarily sorted.","All tests must pass. The function must handle a 2D matrix with sorted inner lists but unsorted rows. The function should return True if the target exists in the matrix, and False otherwise. Input is a 2D matrix of integers and a target integer. No built-in search libraries can be used."
Write a function that takes in a string as input and returns an array of all unique substrings within the string.,All tests must pass. The function must return an array containing all unique substrings from the input string. The implementation must be efficient and handle strings of various lengths. The output should not contain duplicate substrings.
"Given a maze represented as a 2D grid where 0 represents an empty cell, 1 represents a wall, 2 represents the starting cell, and 3 represents the end cell, find the shortest path from the starting cell to the end cell. Two helper methods are available: 1. get_neighbors(cell) returns a list of neighboring cells, 2. is_valid(cell) checks if a cell is within grid boundaries and is an empty cell.","All tests must pass. The function must return a list of coordinates representing the shortest path from the start to the end cell. If no path exists, return an empty list. Input is a 2D grid with specific cell values (0, 1, 2, 3). The solution must use the provided helper methods to navigate the grid and find the optimal path."
Create a function called fibonacciSum that takes an array of positive integers. The function should return the sum of the Fibonacci sequence up to the largest number in the array. A helper function fibonacci should generate the Fibonacci sequence up to a given number.,All tests must pass. The function must find the largest number in the input array and generate a Fibonacci sequence up to that number. The sum of the generated Fibonacci sequence must be returned. The helper function must correctly generate the Fibonacci sequence starting from 0 and 1. Input is an array of positive integers.
Write a function that converts an input integer into its corresponding Roman numeral. The function must handle non-negative integers from 0 to 3999.,All tests must pass. The function must convert integers to correct Roman numeral representation. Valid range is 0 to 3999. Complex conversions like 9 to 'IX' must be handled correctly. No leading zeros are allowed. The output must be a valid Roman numeral string.
