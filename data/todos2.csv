todo,acceptance_criteria
"Create a function called `calculate_sum` that takes in a list of integers as its parameter (`my_list`). The function should return the sum of all numbers in the list, where each number is multiplied by its index before being added to the sum.",All tests must pass. The function must take a list of integers as input. The implementation must multiply each number by its corresponding index. The function must handle lists of varying lengths. Invalid inputs (non-list) should return an error.
Write a function that takes an array of numbers as input and returns a new array with all the even numbers multiplied by 2.,All tests must pass. The function must return a new array without modifying the original array. Only even numbers should be multiplied by 2. The function must work with arrays of any length. The time complexity must be O(n).
"Write a function to find the maximum sum subarray within an array of integers, which may include elements from the beginning, middle, or end of the array.",All tests must pass. The function must handle arrays with negative numbers. The function must return the maximum sum of any contiguous subarray. The implementation must work with arrays of varying lengths. The time complexity must be O(n).
Implement the Kadane's algorithm to find the maximum subarray sum in a given array of integers.,All tests must pass. The function must have a time complexity of O(n). The algorithm must find the maximum sum subarray using Kadane's method. It must work with arrays containing negative numbers.
"Create a function called `is_palindrome` that takes a string as input and returns a boolean indicating whether the input string is a palindrome, ignoring spaces, punctuation, and capitalization.","All tests must pass. The function must ignore spaces, punctuation, and capitalization when checking for palindromes. The function must return a boolean value. It must handle strings of varying lengths, including empty strings."
"Write a function called `find_pairs_sum_to_target` that takes a list of numbers and a target number, and returns a list of unique pairs whose sum equals the target number.",All tests must pass. The function must return all unique pairs that sum to the target number. Input list will contain only positive integers. The function must handle lists of varying lengths. Duplicate pairs must not be included in the result.
Write a function that takes an integer `n` and determines if the sum of its digits is a palindrome number.,All tests must pass. The function must calculate the sum of the digits of the input integer. The function must check if the digit sum is a palindrome number. It must handle integers of varying lengths. The function must work with positive integers.
Create a function called `create_mountain_range` that generates a list of mountain range objects with specified number of peaks.,"All tests must pass. The function must generate at least 5 peaks. Each peak height must be between 100 and 1000. The mountain range must include attributes for peaks, average height, highest peak, and lowest peak. The implementation must work for various input values."
Write a program that generates all possible unique permutations of a given string.,All tests must pass. The function must return a list of all unique permutations of the input string. Permutations must be unique. The function must handle strings of varying lengths. The implementation should use recursion or backtracking.
Write a function that takes a positive integer and returns its prime factors sorted in ascending order.,"All tests must pass. The function must return an empty list for negative or zero inputs. For input 1, return [1]. The prime factors must be sorted in ascending order. The function must handle integers of varying sizes. Prime factorization must be complete and accurate."
"Write a function that performs depth-first traversals of a binary tree: in-order (left -> root -> right), pre-order (root -> left -> right), and post-order (left -> right -> root) for a given binary tree with Node class attributes: value, left, and right","All tests must pass. The function must handle binary tree traversals: in-order, pre-order, and post-order. Return a list of node values based on the specified traversal order. If the input tree is empty, return an empty list. Must use Node class with value, left, and right attributes."
Determine if a list of integers can be split into two sublists such that the sum of elements in each sublist is the same,"All tests must pass. The function must return true if the list can be split into two sublists with equal sums, and false otherwise. Must solve the problem in linear time complexity. Must handle lists of varying lengths and number compositions."
Find the longest palindromic substring in a given string,All tests must pass. Input is a string. Output must be the longest palindromic substring. Must handle strings of varying lengths. Consider both odd and even length palindromes. Ensure efficient substring identification and comparison.
Write a function to find the highest and lowest numbers in an input array,"All tests must pass. Function must return an array with the minimum and maximum values. Must handle arrays of any length, including empty arrays. Must work with arrays containing positive and negative integers."
"Implement a function to reverse a string, handling single and multi-word inputs with special characters","All tests must pass. Must reverse entire string, including words with special characters and numbers. Preserve original character types and positions when reversing. Handle strings of varying complexity."
Implement a function that determines if a given string is a valid word according to a set of rules. Create a Queue class using a list and implement an is_word_valid function that takes a word and rules as input and returns True or False based on specific conditions.,"All tests must pass. The function should take a string word and a set of rules as input. Rules are in the format 'ruleN: character1, character2, ...'. A word is valid if it contains all characters from at least one rule. A word can only contain each character at most once. The implementation must use a Queue class with a list as its underlying data structure."
Write a function that accepts a set of integers and returns the sum of all perfect squares that can be formed from the integers in the set.,"All tests must pass. The function must handle a set of positive integers. The input set size will be at most 20. The function should return the sum of perfect squares (1, 4, 9, 16, 25) that can be formed from the input set."
"Implement Kruskal's algorithm to find the Minimum Spanning Tree (MST) of a weighted, undirected graph.",All tests must pass. The program must use Kruskal's algorithm to find the MST. A boolean array 'visited[]' must track edge visits. Implement a Disjoint Set Union (DSU) or Union-Find data structure using rank and path compression. The solution must output the minimum total weight of the MST formed. The graph is undirected with no self-loops or multiple edges between the same vertices. Edge weights are non-negative.
"Write a function that takes a string as input and checks whether it is a palindrome, ignoring spaces and special characters.",All tests must pass. The function must accept a string input and return a boolean value. The function must ignore spaces and special characters when determining if the string is a palindrome. The function must handle both uppercase and lowercase letters. A palindrome reads the same forwards and backwards.
Write a Python function called find_longest_substring that takes a string as input and returns the longest substring that uses each character only once.,"All tests must pass. The function must be named find_longest_substring. It must accept a string input. Use a dictionary to track characters and their last seen index. Create variables to track the longest and current substring. Iterate through the string, updating substrings based on unique character constraints. Return the longest substring with unique characters."
"Write a function that takes an array of integers and returns the maximum sum of a contiguous subarray, handling both positive and negative numbers.",All tests must pass. The function must accept an integer array input. It should identify and return the maximum sum of a contiguous subarray. The function must correctly handle arrays with both positive and negative integers.
"Write a function called simple_calculator that takes two numbers and an operator, performing basic arithmetic operations.","All tests must pass. The function must support addition (+), subtraction (-), multiplication (*), and division (/) operations. Handle division by zero with a ValueError. Raise a ValueError for unsupported operators. Return the correct result for valid inputs."
Write a function that takes an array of integers and returns the maximum sum of an increasing subsequence with O(n log n) time complexity.,"All tests must pass. The function must accept an integer array input. Return the maximum sum of an increasing subsequence. Achieve O(n log n) time complexity in the implementation. Handle various input scenarios, including arrays with mixed positive and negative integers."
"Given a 2D matrix filled with integers and a target integer, write a function that checks if the target exists in the matrix. The matrix has the following properties: 1. Inner lists are sorted in ascending order. 2. Rows are not necessarily sorted.","All tests must pass. The function must handle a 2D matrix with sorted inner lists but unsorted rows. The function should return True if the target exists in the matrix, and False otherwise. Input is a 2D matrix of integers and a target integer. No built-in search libraries can be used."
Write a function that takes in a string as input and returns an array of all unique substrings within the string.,All tests must pass. The function must return an array containing all unique substrings from the input string. The implementation must be efficient and handle strings of various lengths. The output should not contain duplicate substrings.
"Given a maze represented as a 2D grid where 0 represents an empty cell, 1 represents a wall, 2 represents the starting cell, and 3 represents the end cell, find the shortest path from the starting cell to the end cell. Two helper methods are available: 1. get_neighbors(cell) returns a list of neighboring cells, 2. is_valid(cell) checks if a cell is within grid boundaries and is an empty cell.","All tests must pass. The function must return a list of coordinates representing the shortest path from the start to the end cell. If no path exists, return an empty list. Input is a 2D grid with specific cell values (0, 1, 2, 3). The solution must use the provided helper methods to navigate the grid and find the optimal path."
Create a function called fibonacciSum that takes an array of positive integers. The function should return the sum of the Fibonacci sequence up to the largest number in the array. A helper function fibonacci should generate the Fibonacci sequence up to a given number.,All tests must pass. The function must find the largest number in the input array and generate a Fibonacci sequence up to that number. The sum of the generated Fibonacci sequence must be returned. The helper function must correctly generate the Fibonacci sequence starting from 0 and 1. Input is an array of positive integers.
Write a function that converts an input integer into its corresponding Roman numeral. The function must handle non-negative integers from 0 to 3999.,All tests must pass. The function must convert integers to correct Roman numeral representation. Valid range is 0 to 3999. Complex conversions like 9 to 'IX' must be handled correctly. No leading zeros are allowed. The output must be a valid Roman numeral string.
Create an algorithm that takes a list of circles as input and returns a 2D plane with the minimum number of circles that can completely cover the given circles without overlap.,"All tests must pass. The output must contain the minimum number of circles that cover all input circles. No output circles can overlap. Input circles can be covered by rotation and scaling but not translation. Input circles are distinct, non-overlapping, with integer centers and radii. The solution will be scored on the number of output circles and algorithm efficiency."
"Create a function that takes a string as input and returns a new string where each vowel (a, e, i, o, u) is replaced with the next vowel in the alphabet, preserving the original case.","All tests must pass. The function must replace each vowel with the subsequent vowel, wrapping around from 'u' to 'a'. Vowel case must be preserved. Non-vowel characters remain unchanged. Function must handle strings of any length and complexity."
"Create a program that solves the Knight's Tour problem on an 8x8 chessboard. The program must find a sequence of knight moves that visits every square exactly once, starting from a given initial position.","All tests must pass. The program must create an 8x8 chessboard representation. The knight must move according to standard chess knight movement rules. Every square must be visited exactly once. A backtracking algorithm must be used to explore possible tours. If no valid tour is found, the program must indicate this."
"Given a string, reverse the order of each word within the string while maintaining the original capitalization and punctuation","All tests must pass. Function must handle strings with multiple words. Punctuation and capitalization must be preserved with each word. Words are defined as continuous sequences of characters separated by spaces. Must work with empty strings, single words, and sentences with multiple words."
Create a function that generates a Fibonacci sequence where the sum of consecutive pairs of numbers is a square number. The function should take an integer n as input and return a list of n numbers from the sequence,All tests must pass. The sequence must start similar to the Fibonacci sequence. Each consecutive pair's sum must be a perfect square. Function must handle inputs less than 2. Must return a list of exactly n elements if possible. Sequence generation stops if a pair's sum cannot be a square number.
"Create a function that takes an array of unique integers and a target number, returning a boolean indicating if any two numbers in the array sum to the target","All tests must pass. Input array must contain unique integers between 2 and 15 elements. Target number must be an integer between 0 and 100. Function must have O(n) or better time complexity. Must return true if any two numbers in the array sum exactly to the target, false otherwise."
Write a function that takes two arrays of integers and returns a new array containing the intersection of the two input arrays,All tests must pass. Function must compare elements from both input arrays. Return a new array containing only elements that appear in both input arrays. Must handle arrays of different lengths. Must work correctly with empty arrays or arrays with no common elements.
"Create a program that checks if a given string contains all vowels (a, e, i, o, u)","All tests must pass. Function must check for presence of all five vowels (a, e, i, o, u) in the input string. Case-insensitive check recommended. Must return a clear boolean result. Handle empty strings and strings with partial vowel sets."
"Find the contiguous subarray with the largest sum in an array of integers. If multiple subarrays exist with the same largest sum, return any one",All tests must pass. Input array length between 1 and 10^5. Array elements between -10^4 and 10^4. Must find a contiguous subarray with the maximum possible sum. Must handle arrays with all negative numbers. Time complexity should be O(n).
"Implement a recursive function to calculate the nth Fibonacci number, where the first two numbers are 0 and 1, and each subsequent number is the sum of the two preceding ones","All tests must pass. Function must use recursion. Correctly calculate Fibonacci numbers starting from index 0. Must handle base cases (n = 0, n = 1). Recommended to use memoization or optimization to improve performance for larger n values."
Write a function called `sum_of_digits` that takes a positive integer as input and returns the sum of all its digits.,All tests must pass. The function must only accept positive integers. The output must be the sum of all digits in the input number. No built-in digit summing functions can be used.
Write a function that takes an array of integers as input and returns the sum of all even numbers and the product of all odd numbers in the array.,All tests must pass. The function must correctly calculate the sum of even numbers and the product of odd numbers from the input array. Must handle arrays with mixed even and odd integers. Must return correct values even if the array contains only even or only odd numbers.
Write a program that takes a string of English text and outputs the number of vowels and consonants present.,"All tests must pass. Program must be case-insensitive. Handle punctuation marks and spaces. Correctly count (a, e, i, o, u) as vowels. Provide accurate counts of vowels and consonants in the input text."
Write a function called `switch_cases` that takes two strings and returns a new string with swapped character cases.,All tests must pass. Function must work for input strings of any length. Do not use predefined case-switching functions like `.swapcase()` or `.lower()`. Swap cases of corresponding characters between two input strings.
Write a program that calculates the nth Fibonacci number using recursion and memoization.,All tests must pass. Must use recursion. Implement memoization to store previously computed Fibonacci numbers. Handle large values of n efficiently. Return correct Fibonacci number for given input n.
Find all pairs of indices in an array of strings where concatenated strings form a palindrome.,All tests must pass. Handle all possible string combinations. Correctly identify palindrome pairs. Return exact indices of palindrome-forming string pairs. Support different input string lengths and compositions.
"Write a function that takes a list of integers and returns a new list with elements in reverse order, without using built-in list manipulation functions.","All tests must pass. Reverse the list without using reverse(), sort(), or reversed(). Do not modify the original list. Create a new list with elements in reverse order. Support lists of various lengths and integer types."
Write a function that takes an array of integers as input and returns the length of the longest continuous increasing subsequence in the array.,All tests must pass. Input is an array of integers. Function must return the length of the longest subsequence where each subsequent element is greater than the previous one. Array will always contain at least one element. Solution should efficiently handle various array lengths and configurations.
Write a Python function `count_anagrams(s)` that takes a string containing only lowercase English letters as input and returns the count of distinct anagrams in the string.,All tests must pass. Input is a string of lowercase English letters. Function must return the total count of distinct anagrams found in the string. Must handle duplicate characters. Must efficiently identify and count unique anagram combinations.
"Write a function that computes the minimum number of edits (insertions, deletions, or substitutions) required to transform one string into another using dynamic programming.","All tests must pass. Function must take two input strings. Return the minimum number of edits (insertions, deletions, substitutions) to transform one string into another. Must use dynamic programming approach. Efficiently handle strings of varying lengths and complexity."
"Write a function that calculates the number of palindromic substrings in a given string. A palindromic substring reads the same forwards and backwards, ignoring spaces and punctuation.",All tests must pass. Function must analyze input string and return the total count of palindromic substrings. Must handle strings of varying lengths. Palindromes can be single characters or multiple characters. Solution should use an efficient dynamic programming approach.
Write a function that returns the length of the longest subsequence in an array where the sum of its elements is equal to a target integer.,All tests must pass. Input is an array of integers and a target sum. Function must find and return the length of the longest subsequence whose elements sum exactly to the target. Handle arrays with various lengths and integer configurations.
"Write a function that sorts a list of integers based on their frequency, with less frequent elements appearing first and more frequent elements appearing later.","All tests must pass. Function must sort list in a single pass. Cannot use built-in sorting functions. Time complexity must be O(n). Sort must prioritize elements by their frequency, with less frequent elements appearing first. Preserve original list order for elements with same frequency."
"Given an integer array `nums` and an integer `k`, write a function to return the sum of all subarrays of `nums` with a product less than `k`. A subarray is a contiguous part of the array. The product of a subarray is the product of all the elements in it.",All tests must pass. Constraints: 1 <= nums.length <= 1000. 0 <= nums[i] <= 1000. 0 <= k <= 10^6. Function must handle subarrays of varying lengths. Must handle cases where product is less than k for every possible subarray. Must return the total sum of valid subarray products.
Write a function `sum_primes_under_n` that calculates the sum of all prime numbers less than a given positive integer `n`. A prime number is a number greater than 1 that is divisible only by 1 and itself.,All tests must pass. Input must be a positive integer. Function must return the sum of all prime numbers strictly less than the input number. Prime numbers must be correctly identified as numbers divisible only by 1 and themselves. Must handle edge cases such as when no prime numbers exist under the given input.
"Write a function that removes duplicate characters from a given string, but only if those duplicates appear more than twice. The function should: 1. Take a string as input, 2. Remove duplicate characters that appear more than twice, 3. Return the modified string.",All tests must pass. Input will be a non-empty string consisting of lowercase and uppercase English letters. Function must remove only characters that appear more than two times in the original string. Characters appearing two times or fewer must remain unchanged. Must return a modified string with only the required characters removed.
"Design an algorithm to find the shortest path from the top-left corner to the bottom-right corner of a square grid. The grid contains cells marked as '.' (empty), 'O' (blocking), and '#' (path). Output should be a list of coordinates representing the shortest path.","All tests must pass. Grid must be square with equal number of rows and columns. Grid cells must be either '.', 'O', or '#'. Function must find the absolute shortest path from top-left to bottom-right. Path must avoid 'O' blocking cells. Output must be a list of coordinate tuples representing the path. Must handle grids of various sizes and blocking configurations."
"Write a function to determine if a string of lowercase English letters can be divided into subsequences of at least 2 letters where each subsequence consists of either all vowels (a, e, i, o, u) or all consonants.","All tests must pass. Input is a string of lowercase English letters. Function must identify if the string can be divided into subsequences of either all vowels or all consonants. Subsequences must maintain the original order of characters. Must handle empty strings, strings with only vowels, strings with only consonants, and mixed strings."
Create a function `reverse_words` that takes a string as input and reverses the order of words. The function should handle strings with multiple spaces between words and ignore non-alphabetic characters.,All tests must pass. Input is a string containing words. Function must reverse the order of words while preserving the original words. Multiple spaces between words should be handled correctly. Non-alphabetic characters should be preserved in their original positions. Must work with strings of varying lengths and complexities.
Write a function that takes an integer as input and returns the sum of all prime numbers up to and including that integer.,All tests must pass. Input is an integer. Function must calculate the sum of all prime numbers up to and including the input. Prime numbers must be correctly identified as natural numbers greater than 1 with no divisors other than 1 and themselves. Must handle edge cases such as very small or large input numbers.
"Create a program that can determine if an input string contains a palindrome word. Input: A string containing a mix of words, numbers, and special characters. Output: A boolean value (True or False) indicating whether the string contains a palindrome word.","All tests must pass. The function must correctly identify if a palindrome word exists in the input string. A palindrome word must remain the same if its letters are reversed. Input must accommodate strings with mixed content including words, numbers, and special characters."
"Given a weighted directed graph with multiple node types, write a function that finds the shortest path between a source node and a target node. The function should take a list of nodes (with their types) and a list of weighted edges, and return the shortest path.","All tests must pass. The function must handle three node types: source (type 0), target (type 1), and regular nodes (type 2). Nodes are represented by integers, and edges have integer weights. Must return None if no path exists between source and target. Must correctly handle weighted edges between same and different node types."
Create a function that takes a sorted list of integers and returns the indices of elements within a given range of the middle value. The function must handle lists with both even and odd numbers of elements.,All tests must pass. Must correctly identify the middle value for lists with both even and odd numbers of elements. Must return indices of elements within the specified range of the middle value. Range calculation must be consistent and accurate.
"Implement a function to reverse a linked list in-place. The function must handle empty lists, lists with one node, and lists with multiple nodes.","All tests must pass. Must reverse the linked list without creating a new list. Must correctly update node next pointers. Must handle edge cases including empty list, single-node list, and multi-node list. Must return the new head of the reversed list."
Write a function that takes a list of numbers and returns only the prime numbers. Function must handle both positive and negative numbers.,All tests must pass. Must correctly identify prime numbers in the input list. Prime numbers must be greater than 1 and have no divisors other than 1 and themselves. Must handle both positive and negative numbers. Solution must be optimized for time and space complexity.
Create a function that takes a positive integer \'n\' and returns the sum of the first \'n\' numbers in the Fibonacci sequence. The Fibonacci sequence starts with 0 and 1.,All tests must pass. Must correctly generate Fibonacci sequence starting with 0 and 1. Must accurately sum the first \'n\' numbers in the sequence. Input must be a positive integer. Calculation must be efficient and handle various input values.
"Write a function that returns the maximum sum of a subarray of length \'k\' within a given list of integers. If \'k\' is larger than the list length, return an empty list.",All tests must pass. Must correctly identify the subarray of length \'k\' with the maximum sum. Must handle cases where \'k\' is larger than the list length by returning an empty list. Sliding window technique must be used efficiently. Function must work with lists containing positive and negative integers.
"Given a list of integers, write a function that reverses the order of the elements in the list using a Stack data structure. The function should be implemented to handle lists of any length and be optimized for time and space efficiency.",All tests must pass. The function must reverse a list of integers using a Stack data structure. The output must be a list with elements in the reversed order. The solution should work for lists of any length. The implementation must be time and space efficient.
"Given two strings, determine if they are anagrams. Two strings are anagrams if they contain the same characters, regardless of order. The function `is_anagram` should take two string parameters and return a boolean value.",All tests must pass. The function must only accept lowercase letter strings that are not empty. The function must return True if the strings are anagrams and False otherwise. The solution must compare character composition without considering character order.
"Write a function to determine if a given string is a palindrome. The function should remove all spaces and punctuation, convert characters to lowercase, and check if the modified string reads the same forward and backward.","All tests must pass. The function must handle input strings with spaces, punctuation, and mixed case. The function must convert the input to lowercase and remove all non-alphanumeric characters before checking for palindrome. For complex data types, the function must identify the type of palindrome."
Write a function that takes a string of parentheses and determines if it is valid. A set of parentheses is valid if every opening parenthesis has a corresponding closing parenthesis in the correct order.,"All tests must pass. The function must handle parentheses types: (), {}, [], <>. The input string length must be between 0 and 10^5. The function must return True for valid parentheses sequences and False for invalid ones."
Write a function that calculates the greatest common divisor (GCD) of two positive integers using the Euclidean algorithm. The function should iteratively calculate the GCD by subtracting or using modulo operations.,All tests must pass. The function must accept two positive integers as input. The implementation must use the Euclidean algorithm to calculate GCD. The solution must handle various input pairs and return the correct greatest common divisor.
"Given a list of integers, create a new list containing only the odd integers from the given list, sorted in ascending order.",All tests must pass. The function must return a list containing only odd integers from the input list. The returned list must be sorted in ascending order. The input list will only contain integers and will not be empty.
"Given an array of integers containing both positive and negative numbers, find the maximum sum of a contiguous subarray within the array.",All tests must pass. The input array will always contain numbers. The array size will be between 1 and 10^5. Each number will be between -10^5 and 10^5. The function must return the maximum sum of any contiguous subarray in the input array.
"Given an array of integers, write a function that finds the longest increasing subsequence. The function should return both the length of the longest increasing subsequence and the subsequence itself.",All tests must pass. The input array will always have at least one element. All input values will be integers. The function must return both the length of the longest increasing subsequence and the actual subsequence. The subsequence must maintain the original order of elements.
"Write a function that takes a list of integers as input and returns the index of the first occurrence of a target value in the list. If the target value is not present in the list, the function should return -1.","All tests must pass. The function should take a list of integers and a target value as input. Must return the index of the first occurrence of the target value. If the target value is not found, must return -1. The input list will never be empty."
Write a function that takes in an array of integers and returns the maximum sum of a subarray with a given size k. The function should ignore any subarrays that go beyond the bounds of the input array.,All tests must pass. The function must take an array of integers and a subarray size k as input. Must return the maximum sum of any contiguous subarray of exactly size k. Must handle subarrays that do not exceed input array bounds.
"Write a function named `sum_of_multiples` that takes two arguments, `limit` and `multiples`, both of which are positive integers. The function should return the sum of all multiples of the numbers in the `multiples` list up to the `limit` (inclusive). The multiples should not exceed the limit. If the `limit` or any number in `multiples` is less than or equal to 0, the function should raise a `ValueError`.",All tests must pass. The function must take a positive integer limit and a list of positive integers (multiples). Must return the sum of unique multiples up to the limit. Must raise a ValueError if limit or any multiple is less than or equal to 0. Must correctly handle multiple overlapping multiples.
"Write a function that takes two arrays as inputs and returns true if they have at least one common element, otherwise return false. The function should have a time complexity of O(n).",All tests must pass. The function must take two arrays as input. Must return true if the arrays share at least one common element. Must return false if no common elements exist. Must achieve O(n) time complexity.
Create a function that takes in two strings as arguments and determines if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase.,"All tests must pass. The function must take two strings as input. Must return true if strings are anagrams, false otherwise. Must handle different letter case combinations. Must handle strings with spaces and punctuation. Must ignore non-alphanumeric characters."
Write a function that takes a number `n` as input and returns the sum of all odd numbers between 1 and `n` (inclusive). The function should have a time complexity of O(n) and use only the following built-in functions: `range()` and `sum()`.,All tests must pass. The function must take a positive integer as input. Must calculate the sum of all odd numbers from 1 to n (inclusive). Must use only `range()` and `sum()` functions. Must achieve O(n) time complexity.
"Write a function called `string_transform` that accepts a string `s` as input. The function should transform the string by removing all spaces, converting all uppercase letters to lowercase, reversing the order of characters, and replacing all occurrences of the letter 'a' with the letter '*'.",All tests must pass. The function must take a non-empty string containing alphanumeric characters and spaces. Must remove all spaces. Must convert all uppercase letters to lowercase. Must completely reverse the string. Must replace all 'a' characters with '*'.
Write a function named `find_primes_below_n` that takes a number `n` as input and returns a list of all prime numbers below `n`.,All tests must pass. The function must take a positive integer n as input. Must return a list of all prime numbers strictly less than n. Must have a time complexity of O(n*log(log(n))). Must correctly identify prime numbers.
Write a function to determine the minimum number of insertions and removings required to reconstruct an original sequence from a given array.,"All tests must pass. The function must take two input arrays: a sorted, unique sequence and an unsorted subset array. Must calculate minimum operations to reconstruct the original sequence. Must handle additions and removals efficiently. Must achieve O(n) time complexity."
"Write a function that takes in two arrays of integers, A and B, both of length 10. Your function should return a new array C where C[i] = (A[i] - B[i]) % 10. If the result is negative, set it to 0. The function should run in O(n) time complexity.",All tests must pass. The function must take two integer arrays of exactly length 10. Must compute element-wise subtraction modulo 10. Must set negative results to 0. Must achieve O(n) time complexity. Must handle array inputs precisely.
"Generate Fibonacci Numbers Using Recursion: Write a function that uses recursion to generate Fibonacci numbers. The function should take the number of Fibonacci numbers to generate (n) as input. It must handle edge cases like n < 1, and for n = 1 or 2, return the first or second Fibonacci number (1 or 1). Otherwise, return the sum of the two previous Fibonacci numbers (fib(n-1) + fib(n-2)). The function must be implemented using recursion with defined base cases.","All tests must pass. The function must correctly generate Fibonacci numbers using recursion. It must handle input values less than 1 by returning an error message. For n = 1 or 2, it must return 1. For n > 2, it must return the sum of the two previous Fibonacci numbers. The solution must use recursion with clearly defined base cases."
"Palindrome Mirror: Write a function that takes a string as input and returns the palindrome mirror of that string. The palindrome mirror is formed by concatenating the given string with its reverse. The function must handle strings containing numbers, special characters, and spaces.","All tests must pass. The function must generate a palindrome mirror for any input string. It must correctly concatenate the original string with its reverse. The function must work with strings containing numbers, special characters, and spaces. The output must be a valid palindrome that starts with the original string."
"Vowel Counter: Write a function that takes a string of text as input and returns the number of vowels in the given string. The function should case-insensitively count the number of occurrences of the vowels 'a', 'e', 'i', 'o', and 'u'.","All tests must pass. The function must count vowels case-insensitively. It must correctly identify and count the vowels 'a', 'e', 'i', 'o', and 'u'. The function must handle empty strings, strings with special characters, and spaces."
"Palindrome Checker: Write a function called 'is_palindrome' that takes a string as input and checks whether the string is a palindrome (reads the same forwards and backwards). The function should work with lowercase and uppercase letters, numbers, and spaces.","All tests must pass. The function must correctly identify palindromes. It must ignore spaces when checking for palindromes. The function should handle inputs containing lowercase and uppercase letters, numbers, and spaces. It must return a boolean value indicating whether the input is a palindrome."
Longest Substring Finder: Create a function 'find_longest_substring' that takes a string as input and returns the longest substring without repeating characters. The function must be case-sensitive.,All tests must pass. The function must find the longest substring without repeating characters. It must be case-sensitive. The function should handle various input strings and return the correct longest substring.
Unique Coordinate Combinations: Implement a function that takes a list of coordinate pairs and returns a list of unique combinations of x and y values in ascending order.,All tests must pass. The function must process a list of coordinate pairs. It must return a list of unique x and y coordinate combinations. The returned list must be in ascending order and contain no duplicate coordinates.
Knapsack Problem Solver: Create an algorithm to solve the 0/1 Knapsack Problem. The function must take a list of items (each with a weight and value) and a maximum weight capacity. It should return the most valuable combination of items that can fit within the weight capacity.,"All tests must pass. The function must solve the 0/1 Knapsack Problem optimally. It must handle different sets of items and weight capacities. The solution must have a time complexity of O(nW), where n is the number of items and W is the maximum weight capacity. The function must return the items selected with their total weight and total value."
"Palindrome Substring Finder: Create a program that detects palindrome substrings in a given string. The program must loop through all possible substrings, check if each is a palindrome, and return a sorted list of palindrome substrings. Sorting should be based on substring length, with alphabetical sorting for substrings of equal length.","All tests must pass. The function must identify all palindrome substrings in the input string. The returned list must be sorted first by substring length, then alphabetically for substrings of equal length. It must handle various input strings and correctly identify palindrome substrings."
Integer List Sum: Create a function that takes a list of integers as input and returns their sum using only one loop.,All tests must pass. The function must calculate the sum of all integers in the input list. It must use only one loop to iterate through the list. The function must handle lists of various lengths and integer values.
List Rotation: Write a function 'rotate_list' that takes a list and an integer 'k' as input. The function should rotate the list by 'k' positions to the right and return the new list.,"All tests must pass. The function must correctly rotate the input list by the specified number of positions to the right. It must handle lists of various lengths and rotation values. The time complexity should be O(n), and space complexity O(n)."
Write a function that takes a string as input and returns the reversed version of the string,All tests must pass. The function must take a string input. The function must return the reversed string. The input will never be empty.
Write a function that determines whether a given linked list is palindromic,All tests must pass. The function must take the head of a linked list as input. The function must return a boolean indicating whether the list is palindromic. The input will always be a valid linked list. The list may contain duplicates. The function must handle linked lists of varying lengths.
Write a function to find the length of the longest common subsequence between two strings,"All tests must pass. The function must take two strings as input. The function must return the length of the longest common subsequence. The time complexity must be O(m * n), where m and n are the lengths of the input strings."
Write a function that finds the smallest possible sum between two lists of integers,"All tests must pass. The function must take two lists of equal length. The function must return the minimum element-wise sum. The lists may contain negative numbers and zero. The function must perform the calculation in a single pass. Time complexity must be optimal. If lists are empty or have different lengths, raise a ValueError."
"Write a function to remove duplicate elements from an array, maintaining O(n) time complexity",All tests must pass. The function must take an array of integers as input. The function must return a new array with unique elements only. Time complexity must be O(n). The order of elements should be preserved.
Write a function to find the second highest value in a sorted list of integers,"All tests must pass. The function must take a sorted list of integers as input. The function must return the second highest value. If the list is empty, return None. Handle lists with duplicate values. The function must work with a single pass through the list."
Write a function to generate the first n numbers in a Triangle Number Sequence,All tests must pass. The function must take an integer n as input. The function must return a list of the first n triangle numbers. Triangle numbers must be generated using the unique triplet requirement. The time complexity should be O(n^2).
Write a function that takes in a number 'n' and returns the Fibonacci subsequence of length 'n'. The Fibonacci subsequence is a sequence of numbers where each number after the first two is the sum of the two preceding ones. The first two numbers are always 0 and 1.,All tests must pass. The function must: 1) Accept an integer input 'n' 2) Generate a Fibonacci subsequence starting with 0 and 1 3) Ensure the length of the subsequence is exactly 'n' 4) Compute the sequence efficiently 5) Handle input constraints 6) Minimize computational complexity 7) Return a valid Fibonacci sequence
"Write a function called `most_frequent_word` that takes in a string of text as its input. The function should then return the most frequently occurring word in the input string. If there are two or more words that occur the same number of times, you may return any of them. Words are separated by spaces and the input string will only contain lowercase letters.","All tests must pass. The function must: 1) Accept a string input 2) Split input into words using space as delimiter 3) Handle lowercase letters only 4) Count word frequencies 5) Return the most frequent word 6) If multiple words have the same frequency, return any one of them 7) Handle edge cases like empty string or string with no words"
"Create a function that takes an integer and reverses the order of the linked list nodes. The function should take an integer 'n' representing the nodes of the linked list. Create a Node class to represent each node with a value and next reference. Create functions to create a linked list, append nodes, and reverse the linked list.",All tests must pass. The implementation must: 1) Create a Node class with value and next reference 2) Implement a function to create a linked list 3) Implement a function to append nodes 4) Implement a function to reverse the linked list 5) Maintain the order of node values 6) Handle edge cases like empty or single-node lists 7) Efficiently reverse the linked list without using additional data structures
Implement a function to sort a list of numbers with improved time complexity. Create two functions: `sort_nums` (with a known bug) and `optimal_sort` (an improved sorting implementation).,All tests must pass. The implementation must: 1) Accept a list of numbers as input 2) Return a sorted list in ascending order 3) Optimize the sorting algorithm to minimize time complexity 4) Ensure the sorting is stable 5) Handle various input sizes 6) Improve upon the existing implementation's efficiency 7) Produce consistent and correct sorting results
"Create a function that takes a matrix of size N x N and returns a new matrix where each element is the reverse of the corresponding element in the original matrix. The input matrix will contain integers in the range [0, 9] and have a size between 1 and 1000.","All tests must pass. The implementation must: 1) Accept a square matrix of size N x N 2) Ensure N is between 1 and 1000 3) Handle matrix with integers in range [0, 9] 4) Return a new matrix with reversed elements 5) Maintain the original matrix dimensions 6) Optimize for time complexity 7) Handle edge cases like single-element and empty matrices"
Write a function that takes a string of integers separated by commas and returns a sorted list of those integers. The function should handle strings with different numbers of integers and discard any non-integer characters.,All tests must pass. The function must: 1) Accept a comma-separated string of numbers 2) Ignore non-integer characters 3) Convert valid integers to a list 4) Sort the list in ascending order 5) Handle varying input lengths 6) Process inputs with mixed valid and invalid characters 7) Return an empty list if no valid integers are found
"Write a function that takes a list of integers and a target sum as input, and returns the minimum number of steps required to reach that target sum using the given list. Each number can be used only once, and steps can involve addition or subtraction.",All tests must pass. The implementation must: 1) Accept a list of positive integers 2) Accept a target sum 3) Find the minimum number of steps to reach the target 4) Use each number in the list only once 5) Allow both addition and subtraction operations 6) Ensure the target sum is achievable 7) Handle various input sizes efficiently
"Write a program that finds all prime numbers between two given integers 'a' and 'b', inclusive. The program should accept two integers representing the lower and upper limits of the range and output all prime numbers within that range.",All tests must pass. The implementation must: 1) Accept two integer inputs 'a' and 'b' 2) Verify 'a' is less than or equal to 'b' 3) Identify and return all prime numbers in the range 4) Include both 'a' and 'b' in the range check 5) Handle various range sizes 6) Optimize prime number detection 7) Return an empty list if no primes are found
"You are given a string of text which is a sequence of characters. The text contains no spaces, but it may contain other characters and punctuation. Your task is to write a function that splits the text into words based on specific rules. Rules: 1. Words are separated by either a capital letter or a punctuation mark (excluding quotes). 2. If a word ends with a punctuation mark, the punctuation mark should be included in the word. 3. If there is a sequence of capital letters, treat them as separate words. 4. Quotation marks should not break words. ","All tests must pass."
The Missing Numbers Write a program that can find all missing numbers from a given array of numbers. The array will contain only positive integers and the numbers in the array will be in sorted order (ascending or descending). The program should return a list/array of all missing numbers. ,All tests must pass. The program should return a list/array of all missing numbers.
"Create a function called `triangle_number` that takes an input parameter `num`. The function must determine if `num` is a Triangle Number. A Triangle Number is a number that can be represented as the sum of its proper divisors. For example, the first few Triangle Numbers are 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, and so on. 1. Take the input `num` and find all its proper divisors. Proper divisors are numbers that evenly divide the number without leaving a remainder. For example, the proper divisors of 12 are 1, 2, 3, 4, and 6. 2. Calculate the sum of all the proper divisors found in step 1. 3. If the sum of the proper divisors from step 2 is equal to the input number `num`, then `num` is a Triangle Number. Return `True`. Otherwise, return `False`.","All tests must pass."
"You are given a large array of integers. Write a program that finds and returns the maximum product of any three consecutive elements in the array. To make this problem more challenging, assume that the array can contain both positive and negative integers, and that it might contain zero. Additionally, the array length can be up to 10 million integers.","All tests must pass. Your program should have a time complexity of O(n), where n is the length of the array."
"Write a Python program that can check if a given string contains the same number of uppercase and lowercase letters. If it does, print 'Balanced'. Otherwise, print 'Not Balanced'. Here are the rules for this challenge: 1. The input string can have spaces and punctuation marks. 2. Consider both uppercase and lowercase letters. 3. The input string must contain at least one letter (either uppercase or lowercase). 4. The program should be case-sensitive. ","All tests must pass."
"Write a function called `sum_of_digits` that takes a string as input and returns the sum of all the digits within the string. Leading zeros should be ignored. For example, `sum_of_digits('1234567890')` should return `45`, and `sum_of_digits('abc123')` should return `6`.","All tests must pass."
Write a function that takes a string as input and returns a list of all the substrings of that string. The function should be able to handle strings with any length and should not restrict the length or content of the substrings.,All tests must pass.
"Write a function that takes a sorted array of integers as input and returns the index of the median element. If the array size is even, return the average of the two middle elements.","All tests must pass. The function must handle sorted integer arrays. Must return the index of the median element for odd-length arrays. For even-length arrays, must return the average of the two middle elements. Input array is guaranteed to be sorted in ascending order."
"Design a function to find the optimal number of parentheses pairs in a given string, such that the number of balanced parentheses pairs is maximized. Write a function called `max_balanced_parentheses_pairs` that takes a string as input and returns the maximum number of balanced parentheses pairs that can be formed from the characters in the string.",All tests must pass. Must handle strings containing parentheses. Function must return the maximum number of balanced parentheses pairs. A balanced parentheses pair must be properly nested. Must handle different input string lengths and complexities. Must work with strings containing additional characters.
Find the maximum sum of a non-overlapping subarray with a given length `k` in an array of numbers. Write a function `maxSumSubarray` that takes an array `arr` and a length `k` and returns the maximum sum of a non-overlapping subarray of length `k`.,All tests must pass. Function must take an array and integer k as input. Must return the maximum sum of a non-overlapping subarray of length k. Time complexity should be O(n). Must handle arrays with different lengths and values. Must work with positive and negative numbers.
"Solve the Knapsack Problem by writing a function that takes a list of items with their weights and values, and a knapsack capacity, to return the maximum value that can be achieved without exceeding the weight capacity.",All tests must pass. Function must take a list of items (with weights and values) and knapsack capacity as inputs. Must return the maximum achievable value without exceeding weight limit. Must handle multiple items with different weights and values. Must optimize item selection to maximize total value.
Create a function `sum_unique_elements` that takes an array of integers and returns the sum of all unique elements. The function should handle duplicate numbers and have a time complexity of O(n).,All tests must pass. Function must take an array of integers as input. Must return the sum of unique elements only. Must handle arrays with duplicates. Must have O(n) time complexity. Must work with positive and negative numbers. Must handle empty arrays.
"Design a method to find a target integer in an M x N matrix. The method should return True if the target exists in the matrix, False otherwise.","All tests must pass. Must handle matrices with dimensions between 1x1 and 10^5 x 10^5. Must work with matrices containing positive, negative, and zero integers. Target range is between -10^6 and 10^6. Must efficiently search the matrix. Must return correct boolean result for existing and non-existing targets."
Create a function called `rotate_and_reverse` that takes two arguments: `string` and `rotations`. The function should reverse the `string` after rotating it `rotations` times.,"All tests must pass. The function must handle different string lengths and rotation values. If the input string is empty or has only one character, return an empty string. The function must perform the specified number of rotations before reversing the string."
Write a function that finds the length of the longest common subsequence between two input strings. A subsequence is a sequence derived from another sequence by deleting some or no elements without changing the order of the remaining elements.,"All tests must pass. The function must calculate the length of the longest common subsequence between two input strings. The implementation should efficiently handle different string lengths. Optimize the solution to achieve space complexity of O(min(m, n)) where m and n are the lengths of the input strings."
Create a function that removes duplicate words from a given string. The function should return a new string where each word appears only once.,"All tests must pass. The function must handle input strings containing only alphanumeric characters. The function must remove duplicate words while maintaining the original order of first occurrence. The implementation must split the string, identify unique words, and reconstruct the string with only unique words."
"Write a function that takes an input array of non-negative integers and returns a new array where each element is calculated based on specific rules: 0 remains 0, non-zero elements are transformed to their square plus 1.",All tests must pass. The function must handle input arrays with 1 to 10^5 elements. Each input array element must be between 0 and 10^9. The function must convert each non-zero element to its square plus 1 while keeping zero elements as zero.
"Write a Python function that takes a string of parentheses and checks if the parentheses are balanced. The function should return True if balanced, False otherwise.","All tests must pass. The function must support nested parentheses of any depth. It must correctly identify balanced and unbalanced parenthesis sequences. The function must handle empty strings, single characters, and complex nested parentheses combinations."
Write a function that takes a string as input and returns the length of the longest substring where no character is repeated.,"All tests must pass. The function must handle input strings of any length. It must efficiently find the longest substring without repeating characters. The implementation must achieve O(n) time complexity, where n is the length of the input string."
Write a function called `find_common` that takes two lists as input and returns a list of elements common to both input lists.,"All tests must pass. The function must handle lists of any length. The function must not modify the original input lists. If no common elements exist, an empty list must be returned. The function must preserve the order of common elements as they appear in the first list."
Write a function that finds two indices in an array that add up to a target sum,"All tests must pass. The function must return two zero-based indices of array elements that sum to the target. If no such pair exists, return None. The input array will always have at least two elements."
Write a function that returns only odd numbers from an input array,"All tests must pass. The function must filter the input array to return only odd numbers. If no odd numbers exist, return an empty array. The function must have O(n) time complexity."
Write a function that calculates the sum of squares of numbers in an array,All tests must pass. The function must calculate the sum of squared elements. Input array will contain only integers. Array length will be between 1 and 100. Each integer will be between 1 and 100.
Write a function that returns the frequency of characters in a string,All tests must pass. The function must return an array with the frequency of each character. Frequency count must be case-sensitive. Function should be efficient with minimal iterations.
Write a function to reverse vowels in a substring of a string,All tests must pass. The function must reverse vowels in a specified substring in-place. Input string contains lowercase and uppercase English letters. Indices must be valid. Output string must be same size as input.
Write a function to reverse a substring of a given string,All tests must pass. The function must take a string and an index as inputs. Must return a new string with characters from the given index to the end reversed. Must handle all valid inputs efficiently without mutating the original string.
"Write a function that accepts a list of numbers and returns the sum of all even numbers in the list, and the count of odd numbers in the list",All tests must pass. Function must take a list of numbers as input. Must return two values: sum of even numbers and count of odd numbers. Must handle lists of positive and negative integers.
"Write a function that performs recursive binary tree traversal in pre-order, in-order, and post-order, returning a list of node values for each traversal style","All tests must pass. Implement three distinct traversal methods: pre-order, in-order, post-order. Must return a list of node values for each traversal type. Handle binary trees with various structures and depths."
"Create a function that finds the number of distinct substrings in a given string, with O(n) time complexity",All tests must pass. Must handle empty and non-empty input strings. Return the total count of unique substrings. Maintain O(n) time complexity. Manage strings of varying lengths and character compositions.
Write a function to find the length of the longest increasing subsequence in a list of numbers,All tests must pass. Must handle lists of integers. Find the longest increasing subsequence. Return the length of the subsequence. Support lists with positive and negative numbers.
Implement a function to validate passwords based on specific complexity requirements,"All tests must pass. Validate passwords based on: minimum 8 characters, at least one special character, one number, one uppercase letter, one lowercase letter. Return boolean result for password validity."
"Create a function to check if a given string is a palindrome, ignoring spaces, punctuation, and capitalization","All tests must pass. Handle strings with mixed case, spaces, and punctuation. Return boolean indicating palindrome status. Support various string lengths and character compositions."
Write a function to reverse a specific substring within a given string without using built-in reverse methods,All tests must pass. Reverse specified substring while maintaining its original position. Handle strings of varying lengths. Ensure substring exists in the original string.
"Create a function to determine if a given number is prime, handling various positive integer inputs",All tests must pass. Correctly identify prime and non-prime numbers. Handle edge cases like 1 and 2. Support a wide range of positive integer inputs. Provide efficient primality testing.
Write a function that takes an array of integers as input and returns the length of the longest increasing subsequence within the array,All tests must pass. The function must handle arrays of integers. The function must return the length of the longest increasing subsequence. Must correctly identify subsequences in the input array.
Write a function that returns the length of the longest palindrome subsequence in a given string. The function signature is def longest_palindrome_subsequence(s: str) -> int,"All tests must pass. The function must take a string as input. Must return an integer representing the length of the longest palindrome subsequence. Must handle empty strings, single characters, and strings with multiple possible palindrome subsequences."
"Create a function that finds the closest pair of numbers in an array, returning the pair with the smallest difference and the smallest numbers in case of a tie",All tests must pass. The function must return an object/structure with the two numbers and their difference. Must handle cases with multiple pairs having the same smallest difference. Must work with arrays of varying sizes and with positive and negative numbers.
Write a function that takes a hyphen-separated string and returns a new string with hyphens replaced by spaces,All tests must pass. The function must create a new string. Must replace all hyphens with spaces. Must handle strings with multiple hyphens. Must not modify the original input string.
"Implement a function that performs prime factorization on a given number, returning a tuple of prime factors",All tests must pass. The function must handle positive integers. Must return a tuple of prime factors. The factors must multiply to equal the original number. Must handle edge cases like 1 and prime numbers.
"Write a method to add two matrices by adding corresponding elements, with error checking for matrix size compatibility",All tests must pass. Matrices must have identical dimensions. Must add corresponding elements correctly. Must throw an error or handle cases where matrices have different sizes. Must work with matrices of varying dimensions.
"Implement a function that calculates the number of ways to climb a staircase given a list of stair lengths, where you can climb 1 or 2 steps at a time",All tests must pass. The function must handle lists of 1-100 length. Each stair length must be between 1 and 20. Must return the total number of possible ways to climb the stairs. Must handle edge cases like single or zero-length staircases.
"Write a function called `first_non_repeating_character` that takes in a string as an input, and returns the first non-repeating character in the string. If there are no non-repeating characters, return None. You can assume that the input string will contain only lowercase letters.","All tests must pass. The function must return the first character that appears only once in the string. If no such character exists, return None. The input string will only contain lowercase letters."
"Given two lists A and B of points in the Cartesian plane, implement an algorithm that finds the two closest pairs of points in A and B. The distance between two points is the Euclidean distance: sqrt((x1 - x2)^2 + (y1 - y2)^2).","All tests must pass. The function must calculate Euclidean distance between two points. The input will be two lists of points represented as (x, y) coordinates. The function must return the two closest pairs of points, one from list A and one from list B. The algorithm must handle various input sizes efficiently."
Write a function that takes a string as input and returns a list of the shortest possible palindromic substrings in the string. A palindromic substring is a sequence of characters that reads the same forwards and backwards.,"All tests must pass. The function must return a list of all palindromic substrings, including single characters. The input will be a string containing only lowercase letters. The output must include palindromes of all lengths, from single characters to the entire string, in any order."
"Create a function that takes an array of numbers and returns an array where each element is the product of the numbers to the left of the corresponding element in the original array, excluding the current element itself.","All tests must pass. The function must handle input arrays of various lengths. The input array will contain valid integers or floating-point numbers. The output array must have the same length as the input array, with each element representing the product of numbers to the left of its original position."
"Create a function that takes two arrays of equal length, `A` and `B`, where each element represents a digit. Return the result of multiplying the two numbers together as an array of digits.","All tests must pass. The input arrays `A` and `B` will have a length of at least 1. Each array represents a number where each element is a digit. The function must return the multiplication result as an array of digits, representing the complete number."
Implement a function that finds the shortest path in a 2D grid maze from top-left to bottom-right. The grid is NxN where 0 represents open paths and 1 represents walls. Return the length of the shortest path or -1 if no path exists.,"All tests must pass. The function must return the shortest path length from (0,0) to (N-1, N-1). Only cells with value 0 can be traversed. The function must not modify the input grid. The solution must handle mazes of any size NxN. If no path exists, return -1."
"Create a function that takes a string input and returns the number of non-vowel characters. Vowels are 'a', 'e', 'i', 'o', 'u' (case-insensitive).",All tests must pass. The function must count characters that are not vowels. It must be case-insensitive. The function should work with strings containing letters and spaces. The input will be a reasonable length string.
"Write a function that finds the pair of elements in an array whose sum is closest to a target value. If multiple pairs have equal closeness, return the first occurrence.","All tests must pass. The function must take an array and a target value as input. It must return the pair of elements closest to the target sum. If multiple pairs have the same closeness, the first occurrence must be returned. The function should handle arrays of various sizes."
Create a function that takes a list of integers and returns a new list containing only the unique even numbers in their original order of appearance.,All tests must pass. The function must return a list of unique even numbers. The order of appearance must be preserved from the original list. The list will always contain at least one even number.
Write a program to calculate the sum of all even numbers in an array of integers.,All tests must pass. The function must return the sum of all even numbers in the input array. It must handle empty arrays and null arrays by returning 0. The function should work with arrays of various sizes and containing different integer values.
Implement a function that takes an array of integers and returns the number of pairs of elements that sum up to 0.,All tests must pass. The function must count pairs that sum to zero. No element can be repeated in a pair. The input array will always contain at least two elements. The function must handle arrays of different sizes and with both positive and negative integers.
Create a function 'fibonacci_generator(n)' that generates and returns a list of the first n Fibonacci numbers.,"All tests must pass. The function must generate exactly n Fibonacci numbers starting from [0, 1]. It must have O(n) time complexity and O(1) space complexity. No built-in Fibonacci functions or libraries can be used. The function must handle input of 0 by returning an empty list."
Implement an efficient binary search algorithm that finds the index of a target element in a sorted array or returns -1 if not found.,"All tests must pass. The algorithm must have O(log n) time complexity. It must work with sorted arrays containing duplicate elements. The function must return the index of the target element if found, or -1 if not found. It must minimize the number of comparisons during the search."
"Write a function that takes a string as input and determines if it is a valid IP address in the format ""A.B.C.D"", where A, B, C, and D are single digit numeric characters between 0 and 9.","All tests must pass. Each segment must be a single numeric digit between 0 and 9. The IP address must be separated by periods. Each segment can be a single digit or a pair of digits, but no more than two digits are allowed. The maximum value for a segment is 255. The function must handle leading zeros."
Write a function that takes an integer n as input and returns the n-th Fibonacci number with a time complexity of O(log(n)).,"All tests must pass. The function must compute the nth Fibonacci number efficiently with O(log(n)) time complexity. The Fibonacci sequence follows the rule F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1."
"Create a function that, given a number n, uses a custom dynamic programming algorithm to compute the nth Fibonacci number efficiently.","All tests must pass. The algorithm must have a time complexity of O(n) or less. The function must use no more than O(n) space. The function must correctly compute Fibonacci numbers using the sequence definition: F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2) for n > 1."
Create a function that takes a list of words and returns a list of pairs of indices where the words at those indices are palindromes when their characters are reversed.,All tests must pass. Input must be a list of lowercase strings. Output must be a list of integer pairs where indices are different. List length must be between 1 and 10^5. Individual word length must be between 1 and 10^5. Words must contain only lowercase English letters. The function must find all pairs of words that are palindromes when reversed.
Implement a sorting algorithm to sort an array of integers in non-decreasing order.,All tests must pass. The sorting algorithm must correctly arrange all elements from lowest to highest. The algorithm must handle input arrays with multiple data types if specified. Performance must meet any predefined time or memory constraints.
Create a function that takes a linked list as input and returns the linked list with its nodes in reverse order.,All tests must pass. The function must reverse the order of nodes in-place. The input linked list must contain at least one node. Nodes must contain integer values. The function must not create a new linked list. The last node of the original list must become the first node of the reversed list.
"Find and return all non-overlapping palindromic substrings of an input string, sorted in lexicographic order.","All tests must pass. The function must return all palindromic substrings from the input string. The result must be in lexicographic order. The solution should have a time complexity of O(n^2) or better, where n is the length of the input string."
Write a program that can parse a given comma-separated string of numbers and return the sum of all the numbers within the string. You can assume that the input string will only contain integers and there won't be any unnecessary characters other than commas.,All tests must pass. The function must parse comma-separated integers. The input string will contain only integers and commas. The function should handle the summation of a list of comma-separated numbers. The function must return the total sum of all numbers in the string.
"Write a function that takes an array of integers (A) and two integers (k, s) as input and returns the maximum sum of a contiguous subarray A[i], where 1 ≤ i < len(A) and the subarray contains at least k elements and its sum is greater than or equal to s.","All tests must pass. The function must take an array of positive integers, an integer k (minimum subarray length), and an integer s (minimum subarray sum). The function must return the maximum sum of a contiguous subarray with at least k elements. The returned sum must be greater than or equal to s. The input array A is guaranteed to be non-empty."
Write a function named `remove_char_length` that takes two arguments: 1. `string` (str): The input string from which you'll remove instances of a specific character. 2. `char` (str): The character to be removed from the input string. Your function should return the length of the modified string after removing all occurrences of the specified character.,All tests must pass. The function must take a string and a character to remove. The function must remove all instances of the specified character from the input string. The function must return the length of the modified string after character removal.
"Create a function that takes a string as input and reverses it with special rules: 1. If the string contains any integers, they should be converted to strings and reversed separately. 2. If the string contains any substrings that are palindromes, they should be left unchanged. 3. If the string contains any substrings that are words (composed of only letters), they should be reversed.","All tests must pass. The function must handle input strings containing uppercase and lowercase alphabets, numbers, and spaces. Integers within the string must be reversed separately. Palindromic substrings must remain unchanged. Words composed of letters must be reversed. The function must correctly process mixed-content strings following the specified reversal rules."
"Create a function that can read a text file containing a list of words, remove any duplicate entries, and then sort the unique words alphabetically. The program should output the sorted list of words.",All tests must pass. The program must read a text file containing words. All duplicate word entries must be removed. The final list must be sorted alphabetically. The output must be a list of unique words in alphabetical order.
"Write a Python program that calculates the sum of all even-indexed elements in a given list of integers. The program should handle both positive and negative integers in the list. If the list is empty, the program should return 0.","All tests must pass. The input must be a list of integers. The function must only consider elements at even indices (0, 2, 4, etc.). The function must handle lists of any size, including empty lists. The function must correctly sum even-indexed elements for lists containing positive and negative integers."
Write a Python function that takes an input list of integers and returns the longest consecutive sequence of numbers in the list.,"All tests must pass. The input list is guaranteed to have at least one element. Input list elements can be in any order. Input list can contain duplicates. The function must return the longest consecutive sequence as a list. The consecutive sequence must be based on numeric order, not index order."
"Given a T x R matrix (a grid of T rows and R columns) filled with unique integers, and a target integer, write a function that searches the matrix and returns True if the target is present in the matrix, and False if it is not.",All tests must pass. The matrix must be sorted in ascending row-wise order. The matrix contains unique integers. The matrix must have at least one row and one column. The function must efficiently search for the target integer. The function must return True if the target is found and False if the target is not present.
Write a program that accepts a list of integers as input and returns a new list containing only the integers that are prime numbers. A prime number is a number greater than 1 that has no divisors other than 1 and itself.,All tests must pass. The function must take a list of integers as input. The function must identify and return only prime numbers. A prime number must be greater than 1. The function must handle lists of any size and content. The returned list must contain only prime numbers from the input list.
"Implement a Robot Vacuum Cleaner Algorithm for a grid-based room. Write a function `cleanRoom(grid, r, c, direction)` that takes the room layout, current row, current column, and current direction as inputs. The function should return the minimum number of steps required to clean the entire room.","All tests must pass. The function must handle a two-dimensional grid representing a room with empty cells (0) and obstacles (1). The robot starts at top-left corner (0, 0). The robot can move in four directions: right (1), down (2), left (3), and up (4). A cell can only be visited once. Function must return minimum steps to clean the room or -1 if cleaning is impossible. Input grid must be a 2D list with no more than 100 rows and 100 columns."
Write a function that takes an array of integers and returns an array containing all the missing numbers between the smallest and largest numbers in the input array. The function should assume the input array is sorted in ascending order.,All tests must pass. The function must not modify the input array. It must handle empty input arrays and arrays with only one number. The returned array must contain all numbers missing between the smallest and largest numbers in the input array.
Write a function that takes a string as input and returns the string with all characters in reverse order.,All tests must pass. The input will only contain lowercase and uppercase English alphabetic characters. The function must return a string with the characters in reverse order. The output string must preserve the original character case.
Create a function `sum_subarrays` that takes a sorted list of integers `arr` and an integer `k`. The function should return the sum of all elements in the subarrays of `arr` that have a length less than or equal to `k`.,All tests must pass. The function must handle a sorted input list of integers. It must calculate the sum of all subarrays with length less than or equal to `k`. The function should return the total sum of these subarrays.
Write a program that takes an integer n as input and generates a Fibonacci subsequence where the sum of the even-indexed numbers is equal to n.,All tests must pass. Input n must be an integer between 1 and 1000. The Fibonacci subsequence must start with 0th and 1st numbers (0 and 1). The output must be a list of integers where the sum of even-indexed numbers is exactly equal to the input n.
Write a program that takes an input string and outputs the maximum sum of consecutive characters that are also consecutive in the input string.,"All tests must pass. Input must be a lowercase alphabet string. Function must return the longest consecutive characters with maximum sum. If multiple maximum sums exist, return the longest one. If maximum sum is 0, return an empty string."
Write a function that takes an array of positive integers and determines if any three consecutive numbers in the array form an arithmetic progression.,"All tests must pass. The function must check if any three consecutive numbers in the input array form an arithmetic progression. The function should return True if such a progression is found, and False otherwise."
Write a function to determine if parentheses in a string are correctly nested.,All tests must pass. Input is a string containing only opening and closing parentheses. Function must return a boolean value indicating whether the parentheses are correctly nested. Correctly nested means each opening parenthesis has a corresponding closing parenthesis in the correct order.
Write a function `multiply` that takes an array of numbers and returns a new array where each element is the result of multiplying the corresponding elements from the original array.,All tests must pass. The function must take an input array of numbers. It must return a new array where each element is the multiplicative result of the corresponding input array elements.
Write a function that finds the maximum subarray sum of an input array of integers.,All tests must pass. The input will be an array containing at least one integer. The function must return the maximum possible sum of any contiguous subarray within the input array.
Extend the Fibonacci sequence to include negative numbers and floats,"All tests must pass. Function must accept three parameters: 'start', 'end', and 'step'. Must return Fibonacci sequence within specified range including negative numbers and floats. Function must maintain correct sequence order. Must handle inputs: validate step must not be negative, ensure start is less than or equal to end. Must support float inputs with precision."
Create a function that reads a text file containing a list of numbers and returns the sum of all pairs of numbers that have a difference of 9,"All tests must pass. Input file must be named ""numbers.txt"" in same directory. Program must read numbers from file into list. Must close file after reading. Must compare each pair of numbers and calculate difference. Must sum pairs with exactly 9 difference. Must handle potential errors: file not found, non-numeric values in file."
Write a function that checks if a given array is a valid sequence with distinct integers in strictly increasing order,"All tests must pass. Function must return boolean value. Input array must have at least one integer. Array must contain only distinct integers. Integers must be in strictly increasing order. Must return False for empty arrays, arrays with duplicate elements, or arrays not in increasing order."
Implement a function that returns all unique pairs of elements from a given list of integers,"All tests must pass. Must handle input lists with duplicate elements. Duplicate pairs are not allowed. Pair order does not matter. Pairs like [1, 2] and [2, 1] are considered the same and only one should be included. Must work with lists of varying lengths and compositions."
Write a function that takes a string and returns a list of all palindromic substrings,All tests must pass. Function must handle strings of different lengths. Must return unique palindromic substrings. Output must be in lexicographical order. Must be efficient in time and space complexity. Palindromic substrings are those reading same forwards and backwards.
Write a function that takes a sentence and returns a new sentence with words reversed in character order,All tests must pass. Function must split sentence into words. Reverse characters in each word. Preserve original spacing. Handle leading and trailing spaces. Maintain original sentence structure while reversing individual word characters.
Create a function that removes even numbers from an array and returns their sum,"All tests must pass. Function must compute sum of all even numbers in input array. Must remove even numbers from original array. If no even numbers exist, return original array unchanged. Preserve order of remaining elements."
Create a function that returns a list where each element is the product of all other elements except itself,All tests must pass. Function must compute product of all integers except the integer at corresponding index. Must be efficient with O(n) time complexity. Handle arrays of varying lengths. Preserve original array structure while computing alternate products.
Write a function that computes the length of the longest increasing subsequence in an array of integers,All tests must pass. Function must return length of longest increasing subsequence. Must handle arrays of varying lengths. Dynamic Programming approach recommended. Time complexity should ideally be O(n^2). Must work with positive and negative integers. Handle edge cases like empty arrays.
Create a function that generates a Fibonacci sequence with a twist. Write a function that generates a Fibonacci sequence that does not contain any even numbers. The function should take a non-negative integer n as input representing the length of the generated sequence.,"All tests must pass. The function should return a Fibonacci sequence without even numbers. The function must take a non-negative integer n as input. If n is less than or equal to 0, an error must be returned. The function must implement the Fibonacci sequence algorithm without using built-in methods. The sequence must exclude all even numbers while maintaining the Fibonacci sequence generation logic."
"Write a function that takes a list of integers as input and returns the index of the integer with the highest frequency in the list. In case of a tie, return the index of the first occurrence of the integer.","All tests must pass. The function must return the index of the integer that appears most frequently in the list. If multiple integers have the same highest frequency, the function must return the index of the first such integer. The input must be a list of integers."
"Create a function that takes a sorted list of unique integers as input and returns a new list containing all the even numbers from the input list, while maintaining the original order of the even numbers. The function must have a time complexity of O(n).",All tests must pass. The function must take a sorted list of unique integers as input. The output must be a list containing only even numbers. The original order of even numbers must be preserved. The function must have a time complexity of O(n).
Write a function that takes an integer n as input and returns the sum of all numbers from 1 to n in constant time.,"All tests must pass. The function must calculate the sum of numbers from 1 to n using the arithmetic series formula. The function must handle both odd and even values of n. The time complexity must be O(1), regardless of the input value. The function must return the correct sum for any valid input."
Optimize the Bubble Sort algorithm to improve its efficiency by reducing redundant iterations.,All tests must pass. The optimized algorithm must reduce unnecessary iterations by tracking the last swap index. The algorithm must maintain the core bubble sort logic of comparing and swapping adjacent elements. Performance improvements must be demonstrated through reduced iteration count.
Write a function that takes an array of integers and returns the longest subsequence with the same parity (either all even or all odd).,All tests must pass. The function must identify the longest subsequence where all elements have the same parity (all even or all odd). The subsequence must maintain the original order of elements. The function must work for arrays with at least one integer.
Create a function that reverses a string using recursion.,"All tests must pass. The function must use recursion to reverse the input string. The function must handle strings of any length, including empty strings and single-character strings. The output must be the exact reverse of the input string. No built-in string reversal methods can be used."
Write a function to determine if a list of 10 integers represents a 3x3 magic square.,All tests must pass. The program must validate a 3x3 magic square with these conditions: All 10 input integers must be used. Each row and column must contain distinct positive integers. Each row and column must sum to the same value. Integers must be sorted in ascending order within rows and columns. The program must output 'isValid: true' or 'isValid: false'.
"Write a function called `anagram_checker` that takes two words as input and returns a boolean value indicating whether the words are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, using all the original letters exactly once.",All tests must pass. The function must return a boolean value. It can handle lowercase words with no punctuation or spaces. It must correctly identify anagrams while being case-insensitive. The function should work with words of varying lengths.
Write a function that takes a single string input and returns a new string where all the lowercase characters are capitalized and all the uppercase characters are lowercased.,"All tests must pass. The function must convert lowercase characters to uppercase and uppercase characters to lowercase. It should handle mixed-case strings, preserving non-alphabetic characters. The function should return a new string with the modified case."
Write a Python function that returns the maximum sum of a contiguous subarray in a given list.,All tests must pass. The function must handle lists containing both positive and negative integers. It should return the maximum sum of any contiguous subarray within the input list.
Write a function to help navigate a mall by finding the minimum path between two stores in a mall map represented as a weighted graph.,All tests must pass. The function must return the optimal path between a start and end store. It should compute the total distance of the optimal path. The input must be a weighted graph representing store locations and connections. The output must include both the path and its total distance.
Implement a function that can split a given string into words based on a specific separator and return the number of words in the string.,"All tests must pass. The function must split the input string using the specified separator. It must return the correct number of words. The function should handle cases where the separator is a character or substring. The input string will always contain at least one word, and the separator will be present at least once."
Write a function that takes an array of integers and returns the maximum sum of a non-overlapping subarray.,"All tests must pass. The function must compute the maximum sum of a non-overlapping subarray. The input array will have between 1 and 10,000 elements. Each element will be an integer between -10,000 and 10,000. The function must handle varying array configurations."
Write a function that takes an array of integers as input and returns the sum of its elements.,"All tests must pass. The function must handle arrays containing non-empty lists of integers. It must compute the sum of all elements, including handling negative numbers and zeroes. The input array will have a maximum size of 50 integers. The solution should aim for optimal time complexity."
"Write a function that takes a sorted list of integers and returns a new list with duplicate values removed, without using built-in functions like set() or dict()",All tests must pass. The function must preserve the original order of elements. It must work with sorted input lists. The output list must contain only unique elements. No built-in methods for removing duplicates can be used.
"Create a program to sort three stacks of colored balls (Red, Blue, Green) by moving balls only between stacks, with constraints on moving one ball at a time and maintaining equal number of balls in each stack","All tests must pass. The program must take the number of balls and their colors as input. Balls can only be moved between stacks, not within stacks. Each stack must have an equal number of balls after sorting. The final stacks must be sorted by color."
Create a function to find the maximum sum of a non-empty subarray with a specified product from an input array of positive integers,All tests must pass. The function must handle arrays of positive integers. It must find the maximum sum of a subarray that has the exact specified product. The subarray must be non-empty. The function should work with different input array sizes and product values.
Create a function that takes an integer array and returns a new array with the elements in reverse order,"All tests must pass. The function must create a new array. The output array must contain all elements from the input array in reverse order. The original input array must remain unchanged. The function must work for arrays of any length, including empty arrays."
Write a program to find the longest common subsequence (LCS) between two strings using dynamic programming,All tests must pass. The function must work with strings of the same length. The LCS must be case-sensitive and consider spaces. The implementation must use dynamic programming. The function must return both the length of the LCS and the LCS itself.
Write a function called count_triangular_numbers that takes an integer n as its parameter and returns the count of triangular numbers less than or equal to n,All tests must pass. The function must return the number of triangular numbers less than or equal to the input n. A triangular number is a number that can be represented as a triangle with dots. The function should handle n equal to 0 as the starting point for counting.
Implement a function named find_duplicates that takes in a list of integers and returns a new list containing all duplicate integers found in the input list,All tests must pass. Duplicates are defined as integers that appear more than once in the input list. The function must return a list of all unique duplicate integers. The input list contains integers with no additional constraints.
"Find the smallest positive integer that, when added to the sum of all numbers in an array, results in a multiple of 5","All tests must pass. Input is an array of positive integers with 1 <= arr.length <= 10^5 and 1 <= arr[i] <= 10^9. Return the smallest positive integer that satisfies the multiple of 5 condition. If no such number exists, return -1."
"Write a function that finds the index of the first occurrence of a target value in an array, returning -1 if not found","All tests must pass. Function must return the index of the first occurrence of the target value. If the target is not present, return -1. The function must have a time complexity of O(n)."
Implement a search method for a matrix with specific search constraints,"All tests must pass. Search starts at top-right cell and can only move down or left. Matrix is an n x n grid with specific element generation rules. Function must return True if target is found, False otherwise."
Write a function that returns a unique and sorted list of integers,"All tests must pass. Function must be named unique_sorted_list. Take a list of integers as input. Return a new list with only unique elements, sorted in ascending order. Time complexity must be O(n log n) or better."
Implement a function to find the missing number in a list of integers from 1 to n,"All tests must pass. Input is an array of integers containing numbers from 1 to n, with exactly one number missing. Return the missing number. Array size between 1 and 10^5. Integers between 1 and n (inclusive)."
Write a function is_palindrome to determine if a list of integers is a palindrome,"All tests must pass. Function must return True for empty lists, lists that read the same forwards and backwards. Handle lists with any number of elements and allow duplicate elements."
Implement a function that determines whether an input integer between 2 and 1000 is a prime number.,All tests must pass. Function must correctly identify prime numbers. Input must be an integer between 2 and 1000. A prime number has no positive divisors other than 1 and itself. Function must return a boolean value indicating primality.
"Implement an algorithm to check if a given string is a valid palindrome, ignoring spaces, punctuation, and case.","All tests must pass. Input will contain lowercase and uppercase letters, spaces, and punctuation marks. Function must ignore spaces, punctuation, and case when determining palindrome status. Must return a boolean value. String reads the same forwards and backwards after removing non-alphanumeric characters."
"Write a program that processes an array of numbers: multiply every third number by 2, then find the sum of all even numbers in the array, excluding the modified numbers.","All tests must pass. Every third number in the input array must be multiplied by 2. Sum must include only even numbers, excluding the modified (multiplied) numbers. Input is an array of integers. Function must return the final sum."
"Design a recursive algorithm to solve the Tower of Hanoi puzzle with 7 disks. The algorithm must print the sequence of moves between rods following these rules: only one disk can be moved at a time, no disk can be placed on a smaller disk.","All tests must pass. Start with 7 disks in a specific configuration. Use a recursive approach for solving. Each move must follow Tower of Hanoi rules: move only one disk at a time, never place a larger disk on a smaller disk. Must print the complete sequence of moves between rods."
"Create a function to determine whether a given string is a palindrome, handling spaces, punctuation, and case sensitivity.",All tests must pass. Function must be case-sensitive. Spaces and punctuation must be considered in palindrome determination. Must work with strings of any length. Function must have O(n) time complexity. Return boolean value indicating whether input is a palindrome.
Implement a function to check if a string is a palindrome with complete case and character sensitivity.,All tests must pass. Function must be fully case-sensitive. Spaces and special characters must be considered in palindrome evaluation. Must handle strings of varying lengths. Provide exact character-by-character comparison. Return boolean value indicating palindrome status.
"Create a function that separates even and odd numbers into two different lists and returns both lists as a tuple. The function signature is def separate_evens_odds(numbers: List[int]) -> Tuple[List[int], List[int]]",All tests must pass. Function must create two separate lists: one for even numbers and one for odd numbers. Input must be a list of integers. Return a tuple of two lists. Must use basic list operations and conditional checks to separate numbers.
Write a function that sorts a list of integers using only basic arithmetic operations without using built-in sorting functions. Function should be named arithmetic_sort and take a list of integers as input,All tests must pass. Function must sort list in ascending order. Only basic arithmetic operations allowed. No built-in sorting functions or pre-defined sorting algorithms permitted. Must work for lists of varying lengths and with both positive and negative integers.
Create a function remove_unique_elements(my_list) that removes duplicate values from a list of integers using only built-in list methods,"All tests must pass. Function must remove duplicate values while preserving original order. Cannot use set() or other built-in deduplication methods. Only allowed to use list methods like append(), extend(), pop(), remove(), index(), insert(), sort(), reverse(), and clear(). Must handle lists with multiple duplicates and varying lengths."
Write a function remove_duplicate_words that takes a string and returns a new string with duplicate words removed while maintaining original order,All tests must pass. Function must split input string into words. Preserve first occurrence of each word. Handle strings with punctuation and multiple word repetitions. Maintain original spacing and word order.
"Write a recursive function that reverses a string. Input will only contain lowercase and uppercase letters, as well as spaces","All tests must pass. Function must be recursive. Handle strings with letters and spaces. Return reversed string. Must work with empty strings, single word, and multiple word inputs."
Implement a function to find the longest common subsequence (LCS) between two input strings,All tests must pass. Function must return the longest sequence of characters appearing in both strings in the same order. Handle strings of different lengths. Return an empty string if no common subsequence exists.
"Create a function that reorders a list of integers so that the difference between consecutive elements is always 1, -1, or 0. If impossible, return None",All tests must pass. Function must handle lists of various lengths. Determine if list can be reordered to meet consecutive element difference constraints. Return None if reordering is impossible. Must preserve as many original list elements as possible.
Write a function to reverse a linked list by changing the direction of node pointers,All tests must pass. Function must handle non-empty linked lists. Reverse order of nodes by adjusting node pointers. Ensure function works with lists of different lengths. Return new head of reversed list.
"Create a function to determine if a given string is a palindrome, ignoring spaces, punctuation, and capitalization","All tests must pass. Detect palindromes in a single string pass. Ignore spaces, punctuation, and letter case. Handle strings of varying lengths. Function must have O(n) time complexity."
Implement a function to find local maximum values in an input array,All tests must pass. Correctly identify and return local maximum values. Handle arrays of different sizes. Local maximum must be greater than or equal to its neighboring elements. Function must work with arrays containing both positive and negative integers.
Write a function that takes a string of words separated by commas and returns a new string with all words capitalized. Input contains only alphabetical characters with no punctuation or whitespace.,All tests must pass. Function must handle string input. Split words by comma. Capitalize each word. Rejoin words with comma separator. Maintain original order of words.
Write a function that takes a string and returns a sorted list of unique characters. The function should handle strings of varying lengths and output characters in case-sensitive alphabetical order.,All tests must pass. Function must convert input string to unique characters. Remove duplicate characters. Sort characters in alphabetical order. Maintain case sensitivity. Return sorted list of unique characters.
"Write a function `multiArrayManipulator` that takes a 2D integer array and a manipulations object. Implement array manipulations including multiply, add, and transpose.",All tests must pass. Function accepts 2D array and manipulations object. Support 'multiply' manipulation by scalar. Support 'add' manipulation by scalar. Support 'transpose' manipulation. Apply manipulations in order specified. Return final manipulated array. Handle empty manipulations object by returning original array.
"Given an input string, create a function that determines if the string is a palindrome","All tests must pass. The function must be case-insensitive. Function must handle special characters, spaces, and numerical digits. Must remove non-alphanumeric characters before comparison. Must compare the string in both forward and reverse directions."
Write a function that takes a positive integer 'n' and returns a list of Fibonacci numbers up to the 'n'th Fibonacci number in a zigzag pattern,All tests must pass. Function must handle positive integer input. First two numbers must be 0 and 1. Must alternate between ascending and descending order. Sequence must follow specific rules of addition and subtraction based on odd/even positions. Must return the complete list of Fibonacci numbers up to the nth number.
"Given an array of unique positive integers between 1 and n (inclusive), write a function to find the missing number",All tests must pass. Input array will always contain at least one missing number. Input range is from 1 to n. Maximum value of n is 10^9. Function must return the single missing number in the sequence.
Implement a function that calculates the nth Fibonacci number using dynamic programming,All tests must pass. Function must create a list to store Fibonacci sequence. Must start with initial values 0 and 1. Must calculate subsequent Fibonacci numbers by summing previous two numbers. Must return the correct Fibonacci number at the specified index.
Create a recursive function to calculate the nth Fibonacci number,"All tests must pass. Function must handle recursive calculation without using memoization. Must correctly handle edge cases like negative input, 0, and 1. Must return the correct Fibonacci number for the given input."
Write a program to find the shortest path through a maze from an entrance to an exit,All tests must pass. Input must be an NxN matrix representing a maze. Must identify entrance (marked '2') and exit (marked '3') cells. Must handle obstacles (marked '1'). Must return the shortest path as a list of coordinates. Must use Breadth-First Search algorithm. Must return None if no path exists.
"Given a string s, write a function that finds the longest palindromic substring within the string.",All tests must pass. The function must return the longest palindromic substring found in the input string. Input string consists of lowercase letters only. The length of the string will not exceed 1000.
Create a function that calculates the product of all pairs of elements in a given list of integers.,"All tests must pass. The function must take a list of integers as input and return a list containing the products of all possible pairs. Must handle an empty list or a list not made up of integers. Each pair, even with duplicate values, must be included in the result."
Write a function that takes a string of numbers and returns a new string containing only the unique characters in the input string without using built-in methods or unique character extraction data structures.,All tests must pass. The function must return a string with unique characters from the input string. No built-in methods or unique character extraction data structures can be used.
Write a function that determines if a given string is a valid anagram of another string. Both strings contain only lowercase letters.,All tests must pass. Strings must be of the same length. No duplicate characters within a single string. The function must correctly identify whether two strings are anagrams by comparing their character compositions.
"Implement a custom sorting algorithm called ""Bubble-Merge Sort"" that involves two stages: Bubble Sort and Merge Sort.","All tests must pass. The algorithm must first sort a list using Bubble Sort. Then merge the sorted list with an unsorted list of the same length. The final result must be a single, sorted list. Time complexity should be better than O(n^2) when merging lists."
"Write a function that can reverse a string using multiple methods: manual iteration, using reversed(), slicing, split()/reverse()/join(), and recursively.","All tests must pass. The function must take a string as input and return the reversed string. Must support multiple reversal techniques. Function should work with various input strings, maintaining the exact character order when reversed."
Write a function that finds and returns all pairs of indices from a list of strings where the concatenation of the strings forms a palindrome.,All tests must pass. The function must take a list of strings and return a list of index pairs where string concatenation creates a palindrome. Ignore case and non-alphanumeric characters. Handle all possible string combinations.
Create a function that finds the maximum sum of a subarray within a given array of integers.,All tests must pass. The function must take an array of integers as input. Return the maximum possible sum of any contiguous subarray. Must handle arrays with at least one integer. Implement using dynamic programming principles.
"Write a function that takes in a string of text as input and returns a dictionary where the keys are unique words from the text, and the values are lists of their respective positions in the text, sorted in ascending order.","All tests must pass. The function must return a dictionary where keys are unique words from the input text. The values must be sorted lists of word positions. Positions start from 1. Input text will only contain alphabetic characters, spaces, commas, and periods. Words are separated by spaces or commas."
"Write a function that takes in the number of players on each team and the number of goals scored by each team, and determines the winner of the football match based on certain conditions.","All tests must pass. If one team scores more goals, that team wins. If both teams score the same number of goals, the match is a draw. If both teams have the same number of goals and different number of players, the team with more players wins. The function must correctly handle goal scoring and player count comparisons."
"Create a function that takes in an array of numbers and a target sum, and it should return a boolean indicating whether there exist two numbers in the array whose sum is equal to the target sum.",All tests must pass. The function must have O(n) time complexity and O(1) space complexity. Must return a boolean value indicating whether two numbers in the array sum to the target sum.
Write a function that takes a positive integer as an argument and returns the number of factors it has.,All tests must pass. The function must count the number of factors for a given positive integer. Include 1 and the number itself as factors. Must handle positive integers correctly.
Create a function called `isAnagram` that takes two strings as input and returns a boolean value indicating whether the two strings are anagrams of each other.,All tests must pass. The function must remove whitespace and convert strings to lowercase before comparison. Must reverse the first string before checking. Must sort strings alphabetically for comparison. Must return a boolean indicating if the strings are anagrams.
Implement a function that finds the path with the minimum sum from the root to any leaf in a binary tree.,All tests must pass. The function must return a list of integers representing the path from the root to a leaf with the minimum sum. Must use depth-first search (DFS) approach. Must handle binary trees of varying structures. Must correctly calculate and compare path sums.
Write a function that takes an array of integers as input and returns two values: the sum of odd numbers and the sum of even numbers in the array.,All tests must pass. The function must handle arrays of varying lengths. Must correctly calculate sum of odd and even numbers. Must include error handling for invalid input arrays. Must use modulus operator to identify odd and even numbers.
Create a function that takes a string as an input and outputs whether the input string is a palindrome or not. The function should be case-sensitive and handle special characters and numbers.,"All tests must pass. The function must return a boolean (True/False) indicating whether the input string is a palindrome. The function must handle uppercase and lowercase characters. The function must be able to process strings with special characters, numbers, and punctuation."
"Write a program that takes in a positive integer \'n\' and prints out all the ""fizzy"" numbers up to and including \'n\'. A fizzy number is a number that is divisible by either 3 or 7, or both.",All tests must pass. Input must be a positive integer. Output must include all numbers divisible by 3 or 7. Function must use mathematical operators to determine divisibility. Numbers must be returned in the order they are found within the range.
"Implement the bubble sort algorithm with an optimization to avoid unnecessary swapping operations. Add a flag `swapped` to track if any swaps were made during an iteration. If no swaps were made during an iteration, the list is already sorted, and the algorithm can terminate early.",All tests must pass. The sorting algorithm must modify the input list in-place. The algorithm must efficiently detect when the list is already sorted. Performance optimization must reduce the number of unnecessary comparisons and swaps. The function must handle lists of integers with potential duplicate or out-of-order elements.
Find and return all the numbers that are missing from a given array of integers. The input array will contain unique integers.,"All tests must pass. Input constraints: array length between 1 and 10^5, integers between 1 and 10^5. The function must find and return all missing numbers in the array. Missing numbers must be unique. There will always be at least one missing number. The function must handle arrays with different lengths and number ranges."
"Create a function that takes in a single string parameter and returns a boolean indicating whether the input string is a palindrome. The function should handle punctuation, spaces, and mixed case.","All tests must pass. The function must be case-insensitive when checking for palindromes. Ignore non-alphanumeric characters. Return True for palindrome strings, False otherwise. Handle various input types including words, phrases, and mixed-character strings."
Write a Python program to find the longest increasing subsequence in a given array of integers. The function should return the length or the actual subsequence of increasing elements.,All tests must pass. The function must handle arrays with positive and negative integers. Correctly identify the longest increasing subsequence. Return the length or the actual subsequence based on the implementation. Handle edge cases such as empty arrays or arrays with a single element.
"Given an NxN chessboard, place N queens on the board such that no two queens threaten each other. No two queens can be in the same row, column, or diagonal.","All tests must pass. Input N must be between 4 and 12. Function must find all possible solutions for queen placement. Each solution must ensure no queens are in the same row, column, or diagonal. Output should be a list of lists of coordinates, where the top left is 0,0. Must handle different board sizes efficiently."
"Create a function that takes a list of integers and returns the sum of all even numbers in the list, excluding any negative numbers.",All tests must pass. Function must process a list of integers. Only include non-negative even numbers in the sum. Ignore odd numbers and negative numbers. Return zero if no valid numbers are found in the input list.
Write a function that takes a string as input and reverses the characters in place without using any extra memory.,All tests must pass. **
"Write a function that takes an array of integers as input and returns the sum of all even numbers in the array, excluding any even numbers that appear more than once.",All tests must pass.
"Given an array of numbers, create a function that sorts the array in ascending order, and then sorts the even numbers (squares) in descending order.","All tests must pass. Time complexity should be O(n log n) or better. Space complexity should be O(n) or better. Do not modify the input array; return a new sorted array."
"Create a program that takes a positive integer as input and returns a list of its prime factors. For example, if the input is 120, the program should output [2, 2, 2, 3, 5] because 120 = 2^3 * 3 * 5. You can assume that the input will always be a positive integer.",All tests must pass.
"Given a string containing a set of words separated by spaces, write a program that finds all occurrences of a target word in the string. Each occurrence should be preceded by the total number of characters in the string up to that point.","All tests must pass. The function must split the input string into words. It must track the total number of characters encountered. For each word matching the target, output the total characters up to that point followed by the target word. Must handle cases where the target word is not found."
"Write a recursive function to calculate the number of ways to climb a staircase, given that you can either take 1 step or 2 steps at a time. The function should take one argument, an integer 'n' representing the total number of steps in the staircase.",All tests must pass. The function must calculate the total number of unique ways to climb the staircase using 1 or 2 steps. Input must be a non-negative integer. Function must handle base cases for 0 and 1 steps. The implementation should use recursion to determine the total number of ways to climb the stairs.
"Given a string, write a function that finds and returns all the palindromic substrings in that string. A palindromic substring is a sequence of characters that reads the same forwards and backwards.","All tests must pass. Input must be a string between 1 and 1000 characters long. Must contain only lowercase English letters. The function must return an array of all palindromic substrings found in the input string. If no palindromic substrings exist, return an empty array."
Create a function that can identify and remove duplicates from a given list. The function should eliminate any repeated elements in the input list and return a new list containing only unique elements.,"All tests must pass. The function must not use built-in duplicate removal methods. Must maintain the original order of elements. Time complexity must be O(n). Must handle different data types including nested lists. The output should be a new list with duplicates removed, preserving the first occurrence of each unique element."
"Create a function called 'palindrome_pair' that takes a sorted list of numbers and returns True if there is a pair of numbers whose difference is a palindrome, otherwise False.",All tests must pass. Input must be a sorted list of integers. Function must compare differences between pairs of numbers. Must determine if any pair difference is a palindrome. Must return boolean result. Handles empty or single-element lists.
Write a function that takes an array of integers and returns the maximum sum of a contiguous subarray with length k.,"All tests must pass. Input array must contain at least 1 integer. Subarray length must be exactly k. Can contain positive, negative, or zero integers. Must return the maximum sum of a k-length contiguous subarray."
Write a function that takes a list of integers and returns the maximum product of any two numbers in the list.,All tests must pass. Must find the two largest numbers in the list. Must calculate and return their product. Function should handle lists with various integer values.
Write a function that takes an array of six real numbers and returns the average of the three smallest and three largest numbers.,All tests must pass. Input must be exactly six real numbers. Must identify and separate the three smallest and three largest numbers. Must calculate the average of these two sets. Handles various real number inputs.
"Given a list of integers, write a function that returns the number of pairs of integers within the list that have a difference of 5. A pair is defined as two distinct integers that appear next to each other in the list.",All tests must pass. The function should count pairs of adjacent elements with a difference of 5. Must return an integer representing the number of pairs meeting the condition. Must handle lists of varying lengths. Must consider only adjacent elements for pair identification.
Write a function that finds the maximum sum of a subarray within a given array of integers. The subarray can start from any position and have any length.,All tests must pass. Function must handle arrays containing both positive and negative integers. Must return the maximum possible sum of any continuous subarray. Must work efficiently with large input arrays. Should handle edge cases like all negative numbers or empty arrays.
"Given a grid of numbers, find a continuous path of cells that form a prime number sequence by moving up, down, left, or right.","All tests must pass. Must find the longest possible prime number pathway through the grid. Path must consist of consecutive prime number cells. Moves allowed are up, down, left, and right. Must handle different grid sizes. Must validate prime numbers without using built-in prime checking libraries."
"Write a function that takes an array of integers and removes duplicate elements, sorting the resulting array in ascending order without using built-in methods.",All tests must pass. Function must remove all duplicate elements from the input array. Resulting array must be sorted in ascending order. Must not use any built-in sorting or deduplication methods. Must preserve the original array's order of first occurrence for each unique element.
Write a program that computes the total weighted sum of a list of numbers using their corresponding weights.,All tests must pass. Function must take two lists: numbers and weights. Total weighted sum must be calculated by multiplying each number by its corresponding weight. Must handle lists of varying lengths. Must return the correct weighted sum as a number.
Implement a matrix search function that finds the coordinates of a target value in a 2D matrix.,"All tests must pass. Function must take a 2D matrix and a target value as input. Must return the coordinates (row, column) of the target if found. If target is not found, must return (-1, -1). Matrix may not be sorted. Must handle matrices of different sizes. Must efficiently search through the entire matrix."
Create a function that returns the first n numbers in the Fibonacci sequence that form an arithmetic progression.,"All tests must pass. Function must take an integer n as input. Must return a list of the first n Fibonacci numbers that form an arithmetic progression. If no such sequence exists, must return an empty list. Must handle small and large input values efficiently."
Implement a depth-first search (DFS) of a binary tree that returns all node values in ascending order.,All tests must pass. Function must traverse the binary tree using depth-first search. Must return a list of node values sorted in ascending order. Must handle trees of varying sizes and structures. Must work with unsorted input trees. Must be memory efficient.
Write a function that finds two numbers in an array that add up to a specific target number.,"All tests must pass. Function must take an array of integers and a target number as input. Must return an array containing the two numbers that sum to the target. If no such pair exists, must return null. Must handle arrays of different lengths. Must be efficient in finding the pair."
"Write a function that takes an array of strings as input and finds all the pairs of strings in the array that are close to being palindromes. A string is close to being a palindrome if the difference between it and a palindrome is only one character. The function should return an array of arrays, where each inner array has two strings that are close to being palindromes.",All tests must pass. Function must take an array of strings as input. Function must return an array of arrays containing pairs of strings close to being palindromes. Pairs are considered close to being palindromes if changing only one character transforms them into a palindrome. Must handle cases where multiple such pairs exist. Performance should be efficient and handle various input sizes.
"Create a function that takes a string as input and checks if it is a palindrome. Ignore spaces, punctuation, and letter case. Return True if the string is a palindrome, False otherwise.",All tests must pass. Function must handle both uppercase and lowercase letters. Ignore all non-alphabetic characters during palindrome check. Must return a boolean value. Function should correctly identify palindromes that are sentences or phrases with punctuation and spaces.
"Write a function that takes a list of numbers and returns the number that appears an odd number of times. If multiple such numbers exist, return the smallest one. Must use bitwise operations to solve the problem.",All tests must pass. Function must take a list of numbers as input. Must identify number(s) appearing an odd number of times. Must return the smallest number if multiple numbers appear odd times. Must use bitwise XOR operations. Must handle various list sizes and number variations. Performance should be efficient with minimal additional space usage.
Create a function that takes a string and returns the total number of palindromic substrings within it. A palindromic substring reads the same forwards and backwards.,"All tests must pass. Function must take a string input. Must count ALL palindromic substrings, including single characters. Must handle strings of various lengths. Must be efficient in detecting palindromic substrings. Dynamic programming approach recommended. Must correctly count overlapping palindromic substrings."
Create a function that takes a sorted array of positive integers and finds the index of the first occurrence of a target number. Return the index or -1 if not found. Must use binary search algorithm.,All tests must pass. Function must take a sorted array of positive integers and a target number. Must use binary search algorithm for efficient searching. Return exact index of first occurrence. Return -1 if target not found. Must handle edge cases like empty arrays or target outside array range. Must maintain O(log n) time complexity.
"Create a program that takes a string and outputs the number of unique words, ignoring case and punctuation.",All tests must pass. Function must take a string input. Ignore letter case during word counting. Remove all punctuation before processing. Count only unique words. Return total number of unique words in the input string. Must handle various punctuation marks and spacing variations.
Write a function called find_pair_with_target that takes a list of unique integers nums and a target sum target as parameters. The function should return a list of index pairs where the numbers at those indices add up to the target.,"All tests must pass. The function must return a list of index pairs in the format [(index1, index2), ...]. If no pairs exist that sum to the target, return an empty list. Each pair must represent unique indices where the corresponding numbers add up to the target. Assume no more than one pair exists with the same elements."
"Create a function that takes a list of integers and returns a new list containing integers that are multiples of either 3 or 5, but not both. The output list must be sorted in ascending order.","All tests must pass. The function must filter numbers that are multiples of 3 or 5, but exclude numbers that are multiples of both. The returned list must be sorted in ascending order. The function must work for any input list of integers."
Create a function that finds all the anagrams of a given word within a list of words. The function should return a list of the anagrams found.,All tests must pass. The function must return a list of words that are anagrams of the input word. The function must check for anagrams across the entire input list of words. An anagram is a word that can be rearranged to form another word. The function must handle multiple words in the input list.
"Write a function that generates the Fibonacci sequence for a given number of terms, N. The function should use recursion to generate the sequence.","All tests must pass. The function must take N as input representing the number of terms to generate. Must return a list of integers representing the Fibonacci sequence. If N is less than or equal to 0, return an empty list. For N = 0 or 1, return a list with only that number. Must have O(N) time complexity. Must have O(N) space complexity. Sequence must start with 0 and 1, with each subsequent number being the sum of the two preceding ones."
"Write a function that takes a string as input and returns true if all parentheses in the string are balanced, and false otherwise. The function must work for multiple sets of parentheses.","All tests must pass. The function must return true for balanced parentheses in the input string. Must support multiple types of parentheses such as (), [], and {}. Must handle nested parentheses. Must return false for unbalanced or improperly closed parentheses. Must check that every opening parenthesis has a corresponding closing parenthesis in the correct order."
Write a function that takes a list of integers as input and returns a new list containing only the even numbers from the input list. The function must run in linear time complexity (O(n)) without using built-in filtering functions.,All tests must pass. The function must return a list containing only even numbers from the input list. Must have O(n) time complexity. Cannot use built-in Python functions for filtering or finding even numbers. Must preserve the order of even numbers as they appear in the original list.
"Write a function called validate_phone_number that takes a string input and returns true if the phone number is valid in one of three specific formats: (123) 456-7890, 123-456-7890, or 123 456 7890.",All tests must pass. The function must validate phone numbers in exactly three formats. Input string must have length of 12. Must contain exactly three hyphens or spaces. Must have the correct number of digits in each section. First and second sections must be between 1-9 digits. Third section must be between 1-9 digits. Must return false for invalid phone number formats.
"Write a function that takes two strings, word1 and word2, and returns true if you can convert word1 to word2 by deleting exactly one character from word1.",All tests must pass. Both input words must have the same length. Function must return true only if exactly one character can be deleted from word1 to convert it to word2. Must return false if more or fewer than one character deletion would be required. Character deletion must result in an exact match to word2.
"Given a large positive integer, write a program that finds and returns the largest prime factor of N.",All tests must pass. The program should be optimized to handle large inputs efficiently.
"Given an array arr[] of size n containing only integers, write a function named deleteDuplicates that deletes all the duplicate elements in the array, but maintains the order of the elements. The function should return the modified array.",All tests must pass. Note: The function should not use any built-in functions or libraries to remove duplicates.
"Write a function called `fibonacci_sequence(n)` that takes an integer `n` as an argument and returns the first `n` numbers of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, usually starting with 0 and 1. The function should follow these requirements: 1. It should be able to handle any non-negative integer value for `n`. 2. The function should not use any loops or iterations. 3. The function should have a time complexity of O(n).",All tests must pass.
"Write a function that takes a string as input and determines if it is a palindrome. A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward, ignoring spaces, punctuation, and symbol. Rules: 1. Your function should be able to handle any input string, which can include letters, numbers, punctuation, and symbols. 2. Ignore spaces and punctuation when checking for palindromes. 3. Your function should return True if the string is a palindrome, and False otherwise.","All tests must pass. Rules: Note: This challenge is subjective in terms of difficulty, as the problem is well-defined, but the solution may require medium to advanced programming skills depending on the approach taken."
Create a program that takes in a list of integers and removes any duplicate values from the list while maintaining the original order. Your program should be able to handle lists with at least 10 unique integers. Bonus points if you can create a more efficient version of your algorithm.,All tests must pass.
"Create a function that takes a string as an input and determines if it is a palindrome. A palindrome is a word, phrase, or sequence of characters that reads the same backward as forward. For example, ""racecar,"" ""level,"" and ""was it a car or a cat I saw"" are all palindromes. Your function should handle cases like punctuation, whitespace, and numerical values within the string. It should return `True` if the string is a palindrome and `False` if it is not.",All tests must pass.
"Write a function called `sum_of_multiples` that takes two parameters, `min` and `max`, which are integers representing the inclusive range of numbers. The function should return the sum of all multiples of 2 and 3 within the given range.","All tests must pass. Note: You should not include repeated numbers (such as 6, which is a multiple of both 2 and 3) in your sum. Also, you should not include any number that is not a multiple of either 2 or 3."
"Write a function that takes a string as input and returns the number of unique characters in that string. Characters should be case-sensitive (i.e., 'a' and 'A' are considered different characters). Make sure to handle edge cases like an empty string and whitespace-only strings.",All tests must pass.
"Given two arrays of positive integers, create a function `arrayMashup` that takes `array1` and `array2` and returns a new array where each element is the sum of elements at corresponding indices.",All tests must pass. The function must take two arrays with the same length. The returned array's length should be the sum of the input arrays' lengths. Each element in the result must be the sum of elements at the same index from the input arrays.
"Write a function that takes a string of comma-separated integers and prints the difference between the largest and smallest numbers in the string","All tests must pass."
Create a function `count_matching_elements` that takes two arrays of integers and returns the number of elements in the first array that are also present in the second array.,All tests must pass. The function must take two integer arrays. The function must count elements common to both input arrays. The function must return the number of matching elements.
Write a program that calculates the number of ways a group of distinct numbers can be partitioned into two subsets with equal sums.,All tests must pass. The program must handle an arbitrary list of distinct numbers. The program must find and report all possible partitions where the subset sums are equal. The program must handle various input sizes and number distributions.
"Create a custom stack data structure with methods `push`, `pop`, `peek`, and `is_empty`. The stack should have a capacity of 10 elements and be able to handle any data type.","All tests must pass. The stack must have a maximum capacity of 10 elements. The stack must print ""Stack is full"" when attempting to push to a full stack. The stack must print ""Stack is empty"" when attempting to pop or peek an empty stack. The stack must support any data type."
Write a function to find the longest common subsequence between two strings. A subsequence can be derived by deleting some elements without changing the order of remaining elements.,All tests must pass. The function must take two strings as input. The function must find and return the longest common subsequence. The returned subsequence must maintain the original order of elements.
Write a function `find_missing_number` that finds the missing number in an array of integers. The missing number is an integer from 1 to n+1.,"All tests must pass. The function must take an array of integers as input. The missing number must be between 1 and n+1. If multiple numbers are missing, all must be returned."
"Implement sparse matrix multiplication using dictionaries, where matrices are represented with row indices as keys and row vectors as values.",All tests must pass. The function must take two sparse matrices as dictionary inputs. Matrices can have different sizes. Multiplication must handle non-zero elements efficiently. Row and column indices must be unique.
"Write a function that takes a string as input and reverse the order of the words in the string, but also reverses the order of each individual word's characters.","All tests must pass. The function must take a string input and return a modified string where: 1) Each word's characters are reversed, 2) The order of words is reversed, 3) Punctuation and spacing should be preserved relative to the original word."
"Create a function named `sum_of_multiples` that takes two parameters, `a` and `b`, both integers between 1 and 100 (inclusive). The function should return the sum of all multiples of `a` and `b` in the range from 1 to 100.","All tests must pass. 1) Parameters `a` and `b` must be integers between 1 and 100 (inclusive). 2) If `a` and `b` are the same, return 0. 3) Raise a `ValueError` if `a` or `b` are outside the valid range. 4) The output must be an integer. 5) Skip multiples of both `a` and `b` to avoid counting them twice."
Write a function that takes two parameters: a number 'n' and a number 'k'. The function should return a list of numbers that form a Fibonacci sequence with the sum of any two consecutive numbers being equal to or greater than 'k'. The sequence should have a maximum length of 'n'.,"All tests must pass. 1) Function must take two integer parameters 'n' and 'k'. 2) Return a list of Fibonacci numbers. 3) The sum of any two consecutive numbers must be >= 'k'. 4) Maximum sequence length is 'n'. 5) If no sequence can be generated, return an empty list."
"Given two strings, A and B, create a function that returns the longest common subsequence between the two strings. A subsequence can be derived by deleting elements without changing the order of remaining elements.","All tests must pass. 1) Function must take two strings as input. 2) Return the longest common subsequence. 3) Subsequence must maintain original order of characters. 4) If no common subsequence exists, return an empty string. 5) Handle strings of different lengths efficiently."
Write a function that finds all pairs of numbers in an array that add up to a given target sum. The array will not contain duplicate elements.,All tests must pass. 1) Input must be a non-empty array of integers. 2) A target sum must be provided. 3) Return all unique pairs that sum to the target. 4) Pairs can be in any order. 5) No duplicate pairs should be returned.
"Create an algorithm to find the minimum number of coins needed to make a given amount of change, using a list of coin denominations.",All tests must pass. 1) Input must include a list of coin denominations and a target amount. 2) Target amount must be achievable using given denominations. 3) Return the minimum number of coins to make the target amount. 4) Greedy approach or dynamic programming can be used. 5) Handle various denomination sets efficiently.
"Given an array of strings, return indices of pairs of words that form palindrome pairs when concatenated.",All tests must pass. 1) Input is an array of lowercase strings. 2) Return indices of word pairs where `i != j`. 3) Concatenation of `words[i]` and `words[j]` must be a palindrome. 4) Solve in O(n^2) time complexity. 5) Handle empty arrays and various string combinations.
Write a function that finds the maximum sum of non-adjacent digits in a positive integer's decimal representation.,All tests must pass. 1) Input must be a positive integer. 2) Convert integer to decimal representation. 3) Ignore leading zeros. 4) Return the maximum sum possible by selecting non-adjacent digits. 5) Handle single and multi-digit numbers efficiently.
"Given a string, write a function that removes duplicate characters from it. The function should return the cleaned string. Assume the input string only contains lowercase characters.",All tests must pass. The function must remove duplicate characters while preserving the original order. Input is guaranteed to be a string containing only lowercase characters. Do not use built-in duplicate removal functions.
Create a function that takes a single integer as argument and returns the Fibonacci sequence up to that number. The sequence must be modified so that the sum of any two consecutive numbers (starting from the third number) is always divisible by 3.,All tests must pass. The function must generate a modified Fibonacci sequence where the first two numbers are 0 and 1. Each subsequent number must be the sum of the two preceding ones. The sum of any two consecutive numbers (starting from the third number) must be divisible by 3. The function must return the first n numbers of the modified sequence.
Write a function that takes an array of integers as input and returns the second largest element in the array. The function should handle cases when the input array is not sorted.,"All tests must pass. The function must return the second largest element in the array. The function must handle arrays with duplicates. The function must correctly process arrays with a length of 1 or 2. If no second largest element exists, the function must return an appropriate value."
"Write a function that reads a text file containing a list of words separated by commas and spaces. The program should count the occurrences of each word and output the result in descending order, with the total number of words in the file.",All tests must pass. The program must read a comma and space-separated list of words from a text file. Count and display word occurrences in descending order. Show the total number of words. Provide functionality to remove words containing a specified character. Maintain accurate word count after character-based filtering.
"Create a function that takes a number 'n' as input and returns a list of unique prime numbers that can be obtained by summing pairs of numbers from the range [1, n].","All tests must pass. The function must generate a list of unique prime sums from number pairs in the range [1, n]. Include only unique prime numbers. Ignore duplicate pairs. The range of numbers is strictly [1, n]. Ensure correct handling of prime number identification."
Create a function that takes a string as input and returns the same string with its words reversed. Words should be separated by spaces.,All tests must pass. The function must split the input string into words. Reverse each word while maintaining its original position. Join the reversed words back into a string. Preserve original spacing and punctuation.
"Given an array of integers and a target sum, find all triplets in the array whose elements add up to the target sum. The order of the triplets should not matter.",All tests must pass. The function must return all unique triplets that sum to the target. Ensure no duplicate triplets are returned. Triplet elements must be from distinct indices. Handle various array sizes and input conditions.
Write a function that takes two strings as input and finds the longest common subsequence (LCS) between them.,All tests must pass. The function must use dynamic programming to find the LCS. Identify the longest subsequence that can be derived by deleting some elements without changing order. Return the length or the actual subsequence based on requirements. Handle edge cases with different string lengths.
Write a function that takes a string as input and determines if it is a palindrome.,"All tests must pass. The function must convert the input to lowercase. Ignore non-alphanumeric characters. Return True for palindromes, False otherwise. Implement efficient palindrome checking. Optional: Implement a caching mechanism for performance optimization."
"Given an array of integers A, find the length of the longest subarray where the absolute difference between adjacent elements is greater than or equal to a given value k.",All tests must pass. The function must use dynamic programming to solve the problem. Correctly calculate the longest subarray satisfying the difference condition. Handle various input array sizes and k values. Ensure time complexity is O(nk) or better.
"Create a function that takes in a multi-dimensional array and performs the following tasks: 1. Remove any empty sub-arrays. 2. Reverse the order of elements in each sub-array. 3. Flatten the array. 4. Remove any duplicates from the final flattened array, maintaining the original order.",All tests must pass. The function must handle input with empty sub-arrays. The function must reverse sub-arrays before flattening. Duplicates must be removed while maintaining original order. The function should work with arrays of varying lengths and types of elements.
"Write a function that inserts a new node into a binary search tree, maintaining the properties of a binary search tree: 1. The left subtree of a node contains only nodes with keys less than the node's key. 2. The right subtree of a node contains only nodes with keys greater than the node's key. 3. Both the left and right subtrees must also be binary search trees.",All tests must pass. Function must maintain binary search tree properties. The binary search tree will contain between 1 and 10000 nodes. Each node will have a unique key between 0 and 10^9. The function must correctly place new nodes without disrupting the existing tree structure.
Write a function that performs a zigzag level order traversal of a binary tree. The function should take the root node of the binary tree as input and return a list of the tree's nodes in zigzag level order traversal.,"All tests must pass. Traversal must alternate between left-to-right and right-to-left for each level. Nodes at the same level must be processed before moving to the next level. The function must handle null nodes and empty trees, returning an empty list in these cases."
"Create a function to modify the Fibonacci sequence such that the sum of any two consecutive Fibonacci numbers is always odd. The function must take an integer n as input and return the first n numbers in the modified sequence. The sequence starts with 0 and 1, and subsequent terms are generated by adding the two previous terms with a special rule to ensure odd sum.","All tests must pass. The function must start the sequence with 0 and 1. Subsequent terms must be generated by adding previous terms. If the sum is even, add 1 to the larger of the two previous terms. If the sum is odd, add 1 to the smaller of the two previous terms. The function must return exactly n numbers in the modified Fibonacci sequence."
Write a function to find the shortest path through a maze from the top-left corner (entrance) to the bottom-right corner (exit). The maze is represented by a 2D grid where 0 represents empty spaces and 1 represents walls. Diagonal movements are allowed.,"All tests must pass. The maze grid will have between 1 and 100 rows and columns. Each cell must be either 0 or 1. The entrance is always at (0,0) and exit at (row-1, col-1). Diagonal movements are permitted. If multiple paths exist with the smallest coordinate sum, any can be chosen. The function must handle varying maze configurations."
"Create a function that multiplies corresponding elements from two input arrays of the same length. The arrays might contain strings, numbers, or other data types.",All tests must pass. The function must work with arrays of equal length. It must multiply or combine corresponding elements from both input arrays. The function should handle different data types correctly. The output array must have the same length as input arrays.
"Write a function to count the number of times a substring occurs in a given string. The function must run in O(n) time complexity, where n is the length of the input string.",All tests must pass. The function must count all non-overlapping substring occurrences. The input string will consist only of lowercase letters. The substring length will be at most 10 characters. The function must have O(n) time complexity.
Write a function that removes all trailing zeros from the end of a non-negative integer.,All tests must pass. The function must remove all zeros after the last non-zero digit. The input will always be a non-negative integer. Trailing zeros must be completely eliminated while preserving the significant digits.
Write a function that takes an array of integers and returns a new array with repeated elements removed. The function must be efficient with O(n) time complexity.,All tests must pass. The function must remove all duplicate elements. The function must maintain O(n) time complexity. The order of remaining elements should be preserved.
"Given a grid of size N x N filled with 0s and 1s, write a function to find the shortest path from the top-left cell to the bottom-right cell with a specific movement constraint: move right or down only if the adjacent cell is empty (0), otherwise always move down.","All tests must pass. The function must take a 2D grid of size N x N as input. The grid contains only 0s and 1s, where 0 represents an empty cell and 1 represents a wall. The path starts at the top-left cell and ends at the bottom-right cell. The function must return the shortest path length as an integer."
Write a function called `longest_common_substring` that finds the longest common substring between two given strings `str1` and `str2`.,All tests must pass. The function must take two strings as input and return the longest substring that exists in both strings. The function must handle different string lengths and ensure correct substring extraction.
"Write a function that takes a string parameter and returns the number of times the character 'a' appears in that string, ignoring case sensitivity.","All tests must pass. The function must handle strings up to 10,000 characters in length. The character counting must be case-insensitive. The function must return an integer representing the total count of 'a' or 'A' in the input string."
Write a function that takes an array of strings and returns a new array with each string capitalized.,All tests must pass. The input array will always have at least one string. The array will contain only lowercase alphabetic characters. The function must return a new array with all strings converted to uppercase.
Write a function that removes all duplicate items from a list of integers while maintaining the original order of elements.,All tests must pass. The function must take a list of integers as input. The output must be a list with duplicate items removed while preserving the order of first occurrence. The function should handle lists with multiple duplicates.
Implement a function `k_largest` that takes an array of integers and returns the k-largest elements.,All tests must pass. The input will be a sorted array of integers. The value of k must be between 1 and the length of the array. The function must have a time complexity of O(n). The function must return the k-largest elements in any order.
"Write a function that reverses a string in-place without creating a new string, optimizing for space complexity.","All tests must pass. The function must modify the original string without using additional string storage. The function must handle strings of various lengths, including empty strings and strings with special characters."
"Write a function `is_palindrome` that determines if a given string is a palindrome, ignoring spaces, punctuation, and case.",All tests must pass. The function must take a string as input and return a boolean. The input will only contain alphanumeric characters. Palindrome checking must be case-insensitive and ignore non-alphanumeric characters. The function must have a time complexity of O(n).
"Write a program that takes a string and a dictionary of word replacements, and performs in-place text replacements.",All tests must pass. The function must take a text string and a replacement dictionary as input. Word replacements must be case-sensitive. The function must handle cases where multiple replacement words exist in the text. The replacements must be done in-place within the original string.
Implement a function that takes a number N as input and returns an array of Fibonacci numbers up to the Nth element in reverse order,"All tests must pass. The function must handle inputs for any size of N. The function should handle edge cases including: 0, 1, and inputs that may exceed integer capacity. The output must be an array of Fibonacci numbers in correct reverse sequence."
Implement a function named is_anagram that takes two string arguments and determines if they are anagrams,"All tests must pass. The function must convert input strings to lowercase. If the length of the two strings is not equal, return False. Sort both strings and compare them. Return True if sorted strings are equal, False otherwise."
Create a program that generates and validates a unique 6-digit verification code,All tests must pass. The verification code must be 6 digits long. Each digit must be unique. The code must only contain numbers from 0 to 9. The program must validate the code and output appropriate success or error messages.
Implement the Interval Scheduling problem to find the maximum number of intervals that can be scheduled simultaneously without intersection,"All tests must pass. Input is a list of intervals represented as pairs of integers (start, end). Intervals are sorted by start times. The solution must return the maximum number of non-intersecting intervals. Must identify start and end times of the maximum scheduling."
Write a function to find the longest increasing subsequence (LIS) in a given array of integers,All tests must pass. The function must return the length of the longest increasing subsequence. Must handle various array lengths and integer ranges. Expected time complexity should be O(n^2).
Write a function to remove duplicates from an array of integers,All tests must pass. The function must remove duplicate elements. Optional parameter to return array in reverse order. Must handle arrays with multiple duplicates. Preserves type and allows optional ordering manipulation.
Create a function to rearrange characters in a given string to form a palindrome,"All tests must pass. Input string contains lowercase letters, uppercase letters, digits, and spaces. Function must rearrange characters to create a valid palindrome. Preserve character set integrity."
Find the maximum sum of a subarray with a given length k in an array of integers,"All tests must pass. Input is a sorted array of integers. Find maximum sum of a subarray of length k. Constraints: 1 <= array length <= 10^5, 1 <= k <= array length, Array values between -10^6 and 10^6."
